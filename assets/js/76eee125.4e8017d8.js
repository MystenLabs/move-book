"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[251],{4520:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"move-basics/abilities-introduction","title":"Abilities: Introduction","description":"Move has a unique type system which allows customizing type abilities.","source":"@site/../book/move-basics/abilities-introduction.md","sourceDirName":"move-basics","slug":"/move-basics/abilities-introduction","permalink":"/move-basics/abilities-introduction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.6. Structs","permalink":"/move-basics/struct"},"next":{"title":"5.8. Ability: Drop","permalink":"/move-basics/drop-ability"}}');var s=t(3420),r=t(5521);const o={},a="Abilities: Introduction",l={},c=[{value:"What are Abilities?",id:"what-are-abilities",level:2},{value:"Abilities Syntax",id:"abilities-syntax",level:2},{value:"Overview",id:"overview",level:2},{value:"No Abilities",id:"no-abilities",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"abilities-introduction",children:"Abilities: Introduction"})}),"\n",(0,s.jsxs)(i.p,{children:["Move has a unique type system which allows customizing ",(0,s.jsx)(i.em,{children:"type abilities"}),".\n",(0,s.jsx)(i.a,{href:"./struct",children:"In the previous section"}),", we introduced the ",(0,s.jsx)(i.code,{children:"struct"})," definition and how to use it.\nHowever, the instances of the ",(0,s.jsx)(i.code,{children:"Artist"})," and ",(0,s.jsx)(i.code,{children:"Record"})," structs had to be unpacked for the code to\ncompile. This is default behavior of a struct without ",(0,s.jsx)(i.em,{children:"abilities"}),"."]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["Throughout the book you will see chapters with name ",(0,s.jsx)(i.code,{children:"Ability: <name>"}),", where ",(0,s.jsx)(i.code,{children:"<name>"})," is the name\nof the ability. These chapters will cover the ability in detail, how it works, and how to use it\nin Move."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"what-are-abilities",children:"What are Abilities?"}),"\n",(0,s.jsx)(i.p,{children:"Abilities are a way to allow certain behaviors for a type. They are a part of the struct declaration\nand define which behaviors are allowed for the instances of the struct."}),"\n",(0,s.jsx)(i.h2,{id:"abilities-syntax",children:"Abilities Syntax"}),"\n",(0,s.jsxs)(i.p,{children:["Abilities are set in the struct definition using the ",(0,s.jsx)(i.code,{children:"has"})," keyword followed by a list of abilities.\nThe abilities are separated by commas. Move supports 4 abilities: ",(0,s.jsx)(i.code,{children:"copy"}),", ",(0,s.jsx)(i.code,{children:"drop"}),", ",(0,s.jsx)(i.code,{children:"key"}),", and\n",(0,s.jsx)(i.code,{children:"store"}),". Each ability defines a specific behavior for the struct instances."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-move",children:"/// This struct has the `copy` and `drop` abilities.\npublic struct VeryAble has copy, drop {\n    // field: Type1,\n    // field2: Type2,\n    // ...\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"A quick overview of the abilities:"}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["All of the built-in types except ",(0,s.jsx)(i.a,{href:"references",children:"references"})," have ",(0,s.jsx)(i.code,{children:"copy"}),", ",(0,s.jsx)(i.code,{children:"drop"}),", and ",(0,s.jsx)(i.code,{children:"store"}),"\nabilities. References have ",(0,s.jsx)(i.code,{children:"copy"})," and ",(0,s.jsx)(i.code,{children:"drop"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"copy"})," - allows the struct to be ",(0,s.jsx)(i.em,{children:"copied"}),". Explained in the ",(0,s.jsx)(i.a,{href:"./copy-ability",children:"Ability: Copy"}),"\nchapter."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"drop"})," - allows the struct to be ",(0,s.jsx)(i.em,{children:"dropped"})," or ",(0,s.jsx)(i.em,{children:"discarded"}),". Explained in the\n",(0,s.jsx)(i.a,{href:"./drop-ability",children:"Ability: Drop"})," chapter."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"key"})," - allows the struct to be used as a ",(0,s.jsx)(i.em,{children:"key"})," in a storage. Explained in the\n",(0,s.jsx)(i.a,{href:"./../storage/key-ability",children:"Ability: Key"})," chapter."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"store"})," - allows the struct to be ",(0,s.jsx)(i.em,{children:"stored"})," in structs that have the ",(0,s.jsx)(i.em,{children:"key"})," ability. Explained in\nthe ",(0,s.jsx)(i.a,{href:"./../storage/store-ability",children:"Ability: Store"})," chapter."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"While it is important to briefly mention them here, we will go into more detail about each ability\nin the following chapters and give proper context on how to use them."}),"\n",(0,s.jsx)(i.h2,{id:"no-abilities",children:"No Abilities"}),"\n",(0,s.jsxs)(i.p,{children:["A struct without abilities cannot be discarded, copied, or stored in storage. We call such a struct\na ",(0,s.jsx)(i.em,{children:"Hot Potato"}),". A lighthearted name, but it is a good way to remember that a struct without\nabilities is like a hot potato - it can only be passed around and requires special handling. The Hot\nPotato is one of the most powerful patterns in Move, and we go into more detail about it in the\n",(0,s.jsx)(i.a,{href:"./../programmability/hot-potato-pattern",children:"Hot Potato Pattern"})," chapter."]}),"\n",(0,s.jsx)(i.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./../../reference/abilities",children:"Type Abilities"})," in the Move Reference."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5521:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>a});var n=t(6672);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);