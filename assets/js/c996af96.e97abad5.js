"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6354],{5521:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(6672);const d={},t=i.createContext(d);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},6988:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"concepts/manifest","title":"Package Manifest","description":"The Move.toml is a manifest file that describes the package and its dependencies.","source":"@site/../book/concepts/manifest.md","sourceDirName":"concepts","slug":"/concepts/manifest","permalink":"/concepts/manifest","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"4.1. Packages","permalink":"/concepts/packages"},"next":{"title":"4.3. Address","permalink":"/concepts/address"}}');var d=s(3420),t=s(5521);const a={},c="Package Manifest",o={},r=[{value:"Sections",id:"sections",level:2},{value:"Package",id:"package",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Resolving Version Conflicts with Override",id:"resolving-version-conflicts-with-override",level:3},{value:"Dev-dependencies",id:"dev-dependencies",level:3},{value:"Addresses",id:"addresses",level:3},{value:"Dev-addresses",id:"dev-addresses",level:3},{value:"TOML Styles",id:"toml-styles",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"package-manifest",children:"Package Manifest"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Move.toml"})," is a manifest file that describes the ",(0,d.jsx)(n.a,{href:"./packages",children:"package"})," and its dependencies.\nIt is written in ",(0,d.jsx)(n.a,{href:"https://toml.io/en/",children:"TOML"})," format and contains multiple sections, the most\nimportant of which are ",(0,d.jsx)(n.code,{children:"[package]"}),", ",(0,d.jsx)(n.code,{children:"[dependencies]"})," and ",(0,d.jsx)(n.code,{children:"[addresses]"}),"."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'[package]\nname = "my_project"\nversion = "0.0.0"\nedition = "2024"\n\n[dependencies]\nExample = { git = "https://github.com/example/example.git", subdir = "path/to/package", rev = "framework/testnet" }\n\n[addresses]\nstd =  "0x1"\nalice = "0xA11CE"\n\n[dev-addresses]\nalice = "0xB0B"\n'})}),"\n",(0,d.jsx)(n.h2,{id:"sections",children:"Sections"}),"\n",(0,d.jsx)(n.h3,{id:"package",children:"Package"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"[package]"})," section is used to describe the package. None of the fields in this section are\npublished on chain, but they are used in tooling and release management; they also specify the Move\nedition for the compiler."]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"name"})," - the name of the package when it is imported;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"version"})," - the version of the package, can be used in release management;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"edition"})," - the edition of the Move language; currently, the only valid value is ",(0,d.jsx)(n.code,{children:"2024"}),"."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"[dependencies]"})," section is used to specify the dependencies of the project. Each dependency is\nspecified as a key-value pair, where the key is the name of the dependency, and the value is the\ndependency specification. The dependency specification can be a git repository URL or a path to the\nlocal directory."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'# git repository\nExample = { git = "https://github.com/example/example.git", subdir = "path/to/package", rev = "framework/testnet" }\n\n# local directory\nMyPackage = { local = "../my-package" }\n'})}),"\n",(0,d.jsxs)(n.p,{children:["Packages also import addresses from other packages. For example, the Sui dependency adds the ",(0,d.jsx)(n.code,{children:"std"}),"\nand ",(0,d.jsx)(n.code,{children:"sui"})," addresses to the project. These addresses can be used in the code as aliases for the\naddresses."]}),"\n",(0,d.jsxs)(n.p,{children:["Starting with version 1.45 of the Sui CLI, the Sui system packages (",(0,d.jsx)(n.code,{children:"std"}),", ",(0,d.jsx)(n.code,{children:"sui"}),", ",(0,d.jsx)(n.code,{children:"system"}),",\n",(0,d.jsx)(n.code,{children:"bridge"}),", and ",(0,d.jsx)(n.code,{children:"deepbook"}),") are automatically added as dependencies if none of them are explicitly\nlisted."]}),"\n",(0,d.jsx)(n.h3,{id:"resolving-version-conflicts-with-override",children:"Resolving Version Conflicts with Override"}),"\n",(0,d.jsxs)(n.p,{children:["Sometimes dependencies have conflicting versions of the same package. For example, if you have two\ndependencies that use different versions of the Example package, you can override the dependency in\nthe ",(0,d.jsx)(n.code,{children:"[dependencies]"})," section. To do so, add the ",(0,d.jsx)(n.code,{children:"override"})," field to the dependency. The version of\nthe dependency specified in the ",(0,d.jsx)(n.code,{children:"[dependencies]"})," section will be used instead of the one specified\nin the dependency itself."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nExample = { override = true, git = "https://github.com/example/example.git", subdir = "crates/sui-framework/packages/sui-framework", rev = "framework/testnet" }\n'})}),"\n",(0,d.jsx)(n.h3,{id:"dev-dependencies",children:"Dev-dependencies"}),"\n",(0,d.jsxs)(n.p,{children:["It is possible to add ",(0,d.jsx)(n.code,{children:"[dev-dependencies]"})," section to the manifest. It is used to override\ndependencies in the dev and test modes. For example, if you want to use a different version of the\nSui package in the dev mode, you can add a custom dependency specification to the\n",(0,d.jsx)(n.code,{children:"[dev-dependencies]"})," section."]}),"\n",(0,d.jsx)(n.h3,{id:"addresses",children:"Addresses"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"[addresses]"})," section is used to add aliases for the addresses. Any address can be specified in\nthis section, and then used in the code as an alias. For example, if you add ",(0,d.jsx)(n.code,{children:'alice = "0xA11CE"'})," to\nthis section, you can use ",(0,d.jsx)(n.code,{children:"alice"})," as ",(0,d.jsx)(n.code,{children:"0xA11CE"})," in the code."]}),"\n",(0,d.jsx)(n.h3,{id:"dev-addresses",children:"Dev-addresses"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"[dev-addresses]"})," section is the same as ",(0,d.jsx)(n.code,{children:"[addresses]"}),", but only works for the test and dev\nmodes. Important to note that it is impossible to introduce new aliases in this section, only\noverride the existing ones. So in the example above, if you add ",(0,d.jsx)(n.code,{children:'alice = "0xB0B"'})," to this section,\nthe ",(0,d.jsx)(n.code,{children:"alice"})," address will be ",(0,d.jsx)(n.code,{children:"0xB0B"})," in the test and dev modes, and ",(0,d.jsx)(n.code,{children:"0xA11CE"})," in the regular build."]}),"\n",(0,d.jsx)(n.h2,{id:"toml-styles",children:"TOML Styles"}),"\n",(0,d.jsxs)(n.p,{children:["The TOML format supports two styles for tables: inline and multiline. The examples above are using\nthe inline style, but it is also possible to use the multiline style. You wouldn't want to use it\nfor the ",(0,d.jsx)(n.code,{children:"[package]"})," section, but it can be useful for the dependencies."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'# Inline style\n[dependencies]\nExample = { override = true, git = "https://github.com/example/example.git", subdir = "crates/sui-framework/packages/sui-framework", rev = "framework/testnet" }\nMyPackage = { local = "../my-package" }\n'})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'# Multiline style\n[dependencies.Example]\noverride = true\ngit = "https://github.com/example/example.git"\nsubdir = "crates/sui-framework/packages/sui-framework"\nrev = "framework/testnet"\n\n[dependencies.MyPackage]\nlocal = "../my-package"\n'})}),"\n",(0,d.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"./../../reference/packages",children:"Packages"})," in the Move Reference."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);