"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2559],{5521:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var o=s(6672);const i={},r=o.createContext(i);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(r.Provider,{value:n},e.children)}},7101:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>x,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"control-flow/conditionals","title":"Conditional Expressions | Reference","description":"","source":"@site/../reference/control-flow/conditionals.md","sourceDirName":"control-flow","slug":"/control-flow/conditionals","permalink":"/reference/control-flow/conditionals","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Conditional Expressions | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"Control Flow | Reference","permalink":"/reference/control-flow"},"next":{"title":"6.2 Loops","permalink":"/reference/control-flow/loops"}}');var i=s(3420),r=s(5521);const l={title:"Conditional Expressions | Reference",description:""},t="Conditional if Expressions",c={},a=[{value:"Grammar for Conditionals",id:"grammar-for-conditionals",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"conditional-if-expressions",children:["Conditional ",(0,i.jsx)(n.code,{children:"if"})," Expressions"]})}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"if"})," expression specifies that some code should only be evaluated if a certain condition is true.\nFor example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"if (x > 5) x = x - 5\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The condition must be an expression of type ",(0,i.jsx)(n.code,{children:"bool"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"if"})," expression can optionally include an ",(0,i.jsx)(n.code,{children:"else"})," clause to specify another expression to evaluate\nwhen the condition is false."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"if (y <= 10) y = y + 1 else y = 10\n"})}),"\n",(0,i.jsx)(n.p,{children:'Either the "true" branch or the "false" branch will be evaluated, but not both. Either branch can be\na single expression or an expression block.'}),"\n",(0,i.jsxs)(n.p,{children:["The conditional expressions may produce values so that the ",(0,i.jsx)(n.code,{children:"if"})," expression has a result."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let z = if (x < 100) x else 100;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The expressions in the true and false branches must have compatible types. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"// x and y must be u64 integers\nlet maximum: u64 = if (x > y) x else y;\n\n// ERROR! branches different types\nlet z = if (maximum < 10) 10u8 else 100u64;\n\n// ERROR! branches different types, as default false-branch is () not u64\nif (maximum >= 10) maximum;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:"else"})," clause is not specified, the false branch defaults to the unit value. The following\nare equivalent:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"if (condition) true_branch // implied default: else ()\nif (condition) true_branch else ()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Commonly, ",(0,i.jsx)(n.code,{children:"if"})," expressions are used in conjunction with\n",(0,i.jsx)(n.a,{href:"./../variables#expression-blocks",children:"expression blocks"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let maximum = if (x > y) x else y;\nif (maximum < 10) {\n    x = x + 10;\n    y = y + 10;\n} else if (x >= 10 && y >= 10) {\n    x = x - 10;\n    y = y - 10;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"grammar-for-conditionals",children:"Grammar for Conditionals"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"if-expression"})," \u2192 ",(0,i.jsx)(n.strong,{children:"if ("})," ",(0,i.jsx)(n.em,{children:"expression"})," ",(0,i.jsx)(n.strong,{children:")"})," ",(0,i.jsx)(n.em,{children:"expression"})," ",(0,i.jsx)(n.em,{children:"else-clause"}),(0,i.jsx)("sub",{children:(0,i.jsx)(n.em,{children:"opt"})})," >\n",(0,i.jsx)(n.em,{children:"else-clause"})," \u2192 ",(0,i.jsx)(n.strong,{children:"else"})," ",(0,i.jsx)(n.em,{children:"expression"})]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);