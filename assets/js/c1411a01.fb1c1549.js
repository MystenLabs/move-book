"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4529],{387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"move-basics/testing","title":"Testing","description":"Testing is a crucial aspect of software development, especially in blockchain applications where","source":"@site/../book/move-basics/testing.md","sourceDirName":"move-basics","slug":"/move-basics/testing","permalink":"/move-basics/testing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.25. Type Reflection","permalink":"/move-basics/type-reflection"},"next":{"title":"Object Model","permalink":"/object/"}}');var i=n(3420),o=n(5521);const r={},c="Testing",a={},l=[{value:"The <code>#[test]</code> Attribute",id:"the-test-attribute",level:2},{value:"Running Tests",id:"running-tests",level:2},{value:"Test Fail Cases with <code>#[expected_failure]</code>",id:"test-fail-cases-with-expected_failure",level:2},{value:"Utilities with <code>#[test_only]</code>",id:"utilities-with-test_only",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsx)(t.p,{children:"Testing is a crucial aspect of software development, especially in blockchain applications where\nsecurity and correctness are paramount. In this section, we will cover the fundamentals of testing\nin Move, including how to write and organize tests effectively."}),"\n",(0,i.jsxs)(t.h2,{id:"the-test-attribute",children:["The ",(0,i.jsx)(t.code,{children:"#[test]"})," Attribute"]}),"\n",(0,i.jsxs)(t.p,{children:["Tests in Move are functions marked with the ",(0,i.jsx)(t.code,{children:"#[test]"})," attribute. This attribute tells the compiler\nthat the function is a test function and should be run when tests are executed. Test functions are\nregular functions, but they must take no arguments and have no return value. They are excluded from\nthe bytecode and are never published."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",children:"module book::testing;\n\n// The test attribute is placed before the `fun` keyword (can be both above or\n// right before the `fun` keyword, as in `#[test] fun my_test() { ... }`)\n// The name of the test in this case would be `book::testing::simple_test`.\n#[test]\nfun simple_test() {\n    let sum = 2 + 2;\n    assert!(sum == 4);\n}\n\n// The name of this test would be `book::testing::more_advanced_test`.\n#[test] fun more_advanced_test() {\n    let sum = 2 + 2 + 2;\n    assert!(sum == 4);\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsxs)(t.p,{children:["To run tests, you can use the ",(0,i.jsx)(t.code,{children:"sui move test"})," command. This command will first build the package in\n",(0,i.jsx)(t.em,{children:"test mode"})," and then run all tests found in the package. In test mode, modules from both ",(0,i.jsx)(t.code,{children:"sources/"}),"\nand ",(0,i.jsx)(t.code,{children:"tests/"})," directories are processed and their tests executed."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ sui move test\n> UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\n> INCLUDING DEPENDENCY Bridge\n> INCLUDING DEPENDENCY DeepBook\n> INCLUDING DEPENDENCY SuiSystem\n> INCLUDING DEPENDENCY Sui\n> INCLUDING DEPENDENCY MoveStdlib\n> BUILDING book\n> Running Move unit tests\n> ...\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"test-fail-cases-with-expected_failure",children:["Test Fail Cases with ",(0,i.jsx)(t.code,{children:"#[expected_failure]"})]}),"\n",(0,i.jsxs)(t.p,{children:["Tests for fail cases can be marked with ",(0,i.jsx)(t.code,{children:"#[expected_failure]"}),". This attribute, when added to a\n",(0,i.jsx)(t.code,{children:"#[test]"})," function, tells the compiler that the test is expected to fail. This is useful when you\nwant to test that a function fails when a certain condition is met."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Note: This attribute can only be added to a ",(0,i.jsx)(t.code,{children:"#[test]"})," function."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The attribute can take an argument specifying the expected abort code that should be returned if the\ntest fails. If the test returns an abort code different from the one specified in the argument, it\nwill fail. Likewise, if execution does not result in an abort, the test will also fail."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",children:"module book::testing_failure;\n\nconst EInvalidArgument: u64 = 1;\n\n#[test]\n#[expected_failure(abort_code = 0)]\nfun test_fail() {\n    abort 0 // aborts with 0\n}\n\n// attributes can be grouped together\n#[test, expected_failure(abort_code = EInvalidArgument)]\nfun test_fail_1() {\n    abort 1 // aborts with 1\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"abort_code"}),' argument can use constants defined in the tests module as well as imported from\nother modules. This is the only case where constants can be used and "accessed" in other modules.']}),"\n",(0,i.jsxs)(t.h2,{id:"utilities-with-test_only",children:["Utilities with ",(0,i.jsx)(t.code,{children:"#[test_only]"})]}),"\n",(0,i.jsxs)(t.p,{children:["In some cases, it is helpful to give the test environment access to some internal functions or\nfeatures. This simplifies the testing process and allows for more thorough testing. However, it is\nimportant to remember that these functions should not be included in the final package. This is\nwhere the ",(0,i.jsx)(t.code,{children:"#[test_only]"})," attribute comes in handy."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",children:"module book::testing;\n\n// Public function which uses the `secret` function.\npublic fun multiply_by_secret(x: u64): u64 {\n    x * secret()\n}\n\n/// Private function which is not available to the public.\nfun secret(): u64 { 100 }\n\n#[test_only]\n/// This function is only available for testing purposes in tests and other\n/// test-only functions. Mind the visibility - for `#[test_only]` it is\n/// common to use `public` visibility.\npublic fun secret_for_testing(): u64 {\n    secret()\n}\n\n#[test]\n// In the test environment we have access to the `secret_for_testing` function.\nfun test_multiply_by_secret() {\n    let expected = secret_for_testing() * 2;\n    assert!(multiply_by_secret(2) == expected);\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Functions marked with the ",(0,i.jsx)(t.code,{children:"#[test_only]"})," will be available to the test environment, and to the other\nmodules if their visibility is set to ",(0,i.jsx)(t.code,{children:"public"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://move-book.com/reference/unit-testing.html",children:"Unit Testing"})," in the Move Reference."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5521:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6672);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);