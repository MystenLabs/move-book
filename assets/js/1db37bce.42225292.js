"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3322],{5177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"programmability/dynamic-collections","title":"Dynamic Collections","description":"Sui Framework offers a variety of collection types that build on the","source":"@site/../book/programmability/dynamic-collections.md","sourceDirName":"programmability","slug":"/programmability/dynamic-collections","permalink":"/programmability/dynamic-collections","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.8. Dynamic Object Fields","permalink":"/programmability/dynamic-object-fields"},"next":{"title":"8.10. Pattern: Witness","permalink":"/programmability/witness-pattern"}}');var a=t(3420),s=t(5521);const i={},r="Dynamic Collections",o={},c=[{value:"Common Concepts",id:"common-concepts",level:2},{value:"Bag",id:"bag",level:2},{value:"ObjectBag",id:"objectbag",level:2},{value:"Table",id:"table",level:2},{value:"ObjectTable",id:"objecttable",level:2},{value:"LinkedTable",id:"linkedtable",level:2},{value:"Summary",id:"summary",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"dynamic-collections",children:"Dynamic Collections"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"./sui-framework",children:"Sui Framework"})," offers a variety of collection types that build on the\n",(0,a.jsx)(n.a,{href:"./dynamic-fields",children:"dynamic fields"})," and ",(0,a.jsx)(n.a,{href:"./dynamic-object-fields",children:"dynamic object fields"})," concepts.\nThese collections are designed to be a safer and more understandable way to store and manage dynamic\nfields and objects."]}),"\n",(0,a.jsx)(n.p,{children:"For each collection type we will specify the primitive they use, and the specific features they\noffer."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Unlike dynamic (object) fields which operate on UID, collection types have their own type and\nallow calling ",(0,a.jsx)(n.a,{href:"./../move-basics/struct-methods",children:"associated functions"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-concepts",children:"Common Concepts"}),"\n",(0,a.jsx)(n.p,{children:"All of the collection types share the same set of methods, which are:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"add"})," - adds a field to the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"remove"})," - removes a field from the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"borrow"})," - borrows a field from the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"borrow_mut"})," - borrows a mutable reference to a field from the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"contains"})," - checks if a field exists in the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"length"})," - returns the number of fields in the collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"is_empty"})," - checks if the ",(0,a.jsx)(n.code,{children:"length"})," is 0"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["All collection types support index syntax for ",(0,a.jsx)(n.code,{children:"borrow"})," and ",(0,a.jsx)(n.code,{children:"borrow_mut"})," methods. If you see square\nbrackets in the examples, they are translated into ",(0,a.jsx)(n.code,{children:"borrow"})," and ",(0,a.jsx)(n.code,{children:"borrow_mut"})," calls."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",children:'let hat: &Hat = &bag[b"key"];\nlet hat_mut: &mut Hat = &mut bag[b"key"];\n\n// is equivalent to\nlet hat: &Hat = bag.borrow(b"key");\nlet hat_mut: &mut Hat = bag.borrow_mut(b"key");\n'})}),"\n",(0,a.jsx)(n.p,{children:"In the examples we won't focus on these functions, but rather on the differences between the\ncollection types."}),"\n",(0,a.jsx)(n.h2,{id:"bag",children:"Bag"}),"\n",(0,a.jsx)(n.p,{children:"Bag, as the name suggests, acts as a \"bag\" of heterogeneous values. It is a simple, non-generic type\nthat can store any data. Bag will never allow orphaned fields, as it tracks the number of fields and\ncan't be destroyed if it's not empty."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",children:"module sui::bag;\n\npublic struct Bag has key, store {\n    /// the ID of this bag\n    id: UID,\n    /// the number of key-value pairs in the bag\n    size: u64,\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/bag",children:"full documentation for sui::bag"})," module."]})}),"\n",(0,a.jsx)(n.p,{children:"Due to Bag storing any types, the extra methods it offers is:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"contains_with_type"})," - checks if a field exists with a specific type"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Used as a struct field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=bag_struct",children:"/// Imported from the `sui::bag` module.\nuse sui::bag::{Self, Bag};\n\n/// An example of a `Bag` as a struct field.\npublic struct Carrier has key {\n    id: UID,\n    bag: Bag\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the Bag:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=bag_usage",children:'let mut bag = bag::new(ctx);\n\n// bag has the `length` function to get the number of elements\nassert_eq!(bag.length(), 0);\n\nbag.add(b"my_key", b"my_value".to_string());\n\n// length has changed to 1\nassert_eq!(bag.length(), 1);\n\n// in order: `borrow`, `borrow_mut` and `remove`\n// the value type must be specified\nlet field_ref: &String = &bag[b"my_key"];\nlet field_mut: &mut String = &mut bag[b"my_key"];\nlet field: String = bag.remove(b"my_key");\n\n// length is back to 0 - we can unpack\nbag.destroy_empty();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"objectbag",children:"ObjectBag"}),"\n",(0,a.jsxs)(n.p,{children:["Defined in the ",(0,a.jsx)(n.code,{children:"sui::object_bag"})," module. Identical to ",(0,a.jsx)(n.a,{href:"#bag",children:"Bag"}),", but uses\n",(0,a.jsx)(n.a,{href:"./dynamic-object-fields",children:"dynamic object fields"})," internally. Can only store objects as values."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/object_bag",children:"full documentation for sui::object_bag"})," module."]})}),"\n",(0,a.jsx)(n.h2,{id:"table",children:"Table"}),"\n",(0,a.jsxs)(n.p,{children:["Table is a typed dynamic collection that has a fixed type for keys and values. It is defined in the\n",(0,a.jsx)(n.code,{children:"sui::table"})," module."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",children:"module sui::table;\n\npublic struct Table<phantom K: copy + drop + store, phantom V: store> has key, store {\n    /// the ID of this table\n    id: UID,\n    /// the number of key-value pairs in the table\n    size: u64,\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/table",children:"full documentation for sui::table"})," module."]})}),"\n",(0,a.jsx)(n.p,{children:"Used as a struct field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=table_struct",children:"/// Imported from the `sui::table` module.\nuse sui::table::{Self, Table};\n\n/// Some record type with `store`\npublic struct Record has store { /* ... */ }\n\n/// An example of a `Table` as a struct field.\npublic struct UserRegistry has key {\n    id: UID,\n    table: Table<address, Record>\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the Table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=table_usage",children:'// Table requires explicit type parameters for the key and value\n// ...but does it only once in initialization.\nlet mut table = table::new<address, String>(ctx);\n\n// table has the `length` function to get the number of elements\nassert_eq!(table.length(), 0);\n\ntable.add(@0xa11ce, b"my_value".to_string());\ntable.add(@0xb0b, b"another_value".to_string());\n\n// length has changed to 2\nassert_eq!(table.length(), 2);\n\n// in order: `borrow`, `borrow_mut` and `remove`\nlet value_ref = &table[@0xa11ce];\nlet value_mut = &mut table[@0xa11ce];\n\n// removing both values\nlet _value = table.remove(@0xa11ce);\nlet _another_value = table.remove(@0xb0b);\n\n// length is back to 0 - we can unpack\ntable.destroy_empty();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"objecttable",children:"ObjectTable"}),"\n",(0,a.jsxs)(n.p,{children:["Defined in the ",(0,a.jsx)(n.code,{children:"sui::object_table"})," module. Identical to ",(0,a.jsx)(n.a,{href:"#table",children:"Table"}),", but uses\n",(0,a.jsx)(n.a,{href:"./dynamic-object-fields",children:"dynamic object fields"})," internally. Can only store objects as values."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/object_table",children:"full documentation for sui::object_table"})," module."]})}),"\n",(0,a.jsx)(n.h2,{id:"linkedtable",children:"LinkedTable"}),"\n",(0,a.jsxs)(n.p,{children:["It is defined in the ",(0,a.jsx)(n.code,{children:"sui::linked_table"})," module, similar to ",(0,a.jsx)(n.a,{href:"#table",children:"Table"})," but the values are linked together,\nallowing for ordered insertion and removal."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",children:"module sui::linked_table;\n\npublic struct LinkedTable<K: copy + drop + store, phantom V: store> has key, store {\n    /// the ID of this table\n    id: UID,\n    /// the number of key-value pairs in the table\n    size: u64,\n    /// the front of the table, i.e. the key of the first entry\n    head: Option<K>,\n    /// the back of the table, i.e. the key of the last entry\n    tail: Option<K>,\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/linked_table",children:"full documentation for sui::linked_table"})," module."]})}),"\n",(0,a.jsx)(n.p,{children:"Since the values stored in LinkedTable are linked together, it has unique methods for adding and deleting."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"push_front"})," - inserts a key-value pair at the front of the table"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"push_back"})," - inserts a key-value pair at the back of the table"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"remove"})," - removes a key-value pair by key and returns the value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pop_front"})," - removes the front of the table, returns the key and value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pop_back"})," - removes the back of the table, returns the key and value"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Used as a struct field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=linked_table_struct",children:"/// Imported from the `sui::linked_table` module.\nuse sui::linked_table::{Self, LinkedTable};\n\n/// Some record type with `store`\npublic struct Permissions has store { /* ... */ }\n\n/// An example of a `LinkedTable` as a struct field.\npublic struct AdminRegistry has key {\n    id: UID,\n    linked_table: LinkedTable<address, Permissions>\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the LinkedTable:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-collections.move anchor=linked_table_usage",children:'// LinkedTable requires explicit type parameters for the key and value\n// ...but does it only once in initialization.\nlet mut linked_table = linked_table::new<address, String>(ctx);\n\n// linked_table has the `length` function to get the number of elements\nassert_eq!(linked_table.length(), 0);\n\nlinked_table.push_front(@0xa0a, b"first_value".to_string());\nlinked_table.push_back(@0xb1b, b"second_value".to_string());\nlinked_table.push_back(@0xc2c, b"third_value".to_string());\n\n// length has changed to 3\nassert_eq!(linked_table.length(), 3);\n\n// in order: `borrow`, `borrow_mut` and `remove`\nlet first_value_ref = &linked_table[@0xa0a];\nlet second_value_mut = &mut linked_table[@0xb1b];\n\n// remove by key, from the beginning or from the end\nlet _second_value = linked_table.remove(@0xb1b);\nlet (_first_addr, _first_value) = linked_table.pop_front();\nlet (_third_addr, _third_value) = linked_table.pop_back();\n\n// length is back to 0 - we can unpack\nlinked_table.destroy_empty();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#bag",children:"Bag"})," - a simple collection that can store any type of data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#objectbag",children:"ObjectBag"})," - a collection that can store only objects."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#table",children:"Table"})," - a typed dynamic collection that has a fixed type for keys and values."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#objecttable",children:"ObjectTable"})," - same as Table, but can only store objects."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#linkedtable",children:"LinkedTable"})," - similar to Table but the values are linked together."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/table",children:"sui::table"})," module documentation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/object_table",children:"sui::object_table"})," module documentation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/linked_table",children:"sui::linked_table"})," module documentation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/bag",children:"sui::bag"})," module documentation."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.sui.io/references/framework/sui/object_bag",children:"sui::object_bag"})," module documentation."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},5521:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var l=t(6672);const a={},s=l.createContext(a);function i(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);