"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5328],{5521:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6672);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},8215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"object/ownership","title":"Ownership","description":"Sui introduces four distinct ownership types for objects: single owner, shared state, immutable","source":"@site/../book/object/ownership.md","sourceDirName":"object","slug":"/object/ownership","permalink":"/object/ownership","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"6.3. What is an Object?","permalink":"/object/object-model"},"next":{"title":"6.5. Fast Path & Consensus","permalink":"/object/fast-path-and-consensus"}}');var o=n(3420),a=n(5521);const i={},r="Ownership",c={},l=[{value:"Account Owner (or Single Owner)",id:"account-owner-or-single-owner",level:2},{value:"Shared State",id:"shared-state",level:2},{value:"Immutable (Frozen) State",id:"immutable-frozen-state",level:2},{value:"Object Owner",id:"object-owner",level:2},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"ownership",children:"Ownership"})}),"\n",(0,o.jsx)(t.p,{children:"Sui introduces four distinct ownership types for objects: single owner, shared state, immutable\nshared state, and object-owner. Each model offers unique characteristics and suits different use\ncases, enhancing flexibility and control in object management."}),"\n",(0,o.jsx)(t.p,{children:"Note that ownership does not control the confidentiality of an object \u2014 it is always possible\nto read the contents of an on-chain object from outside of Move. You should never store unencrypted\nsecrets inside of objects."}),"\n",(0,o.jsxs)(t.p,{children:["See the ",(0,o.jsx)(t.a,{href:"/storage/storage-functions",children:"Storage Functions"})," chapter for details on how to change\nthe owner or ownership type of an object."]}),"\n",(0,o.jsx)(t.h2,{id:"account-owner-or-single-owner",children:"Account Owner (or Single Owner)"}),"\n",(0,o.jsxs)(t.p,{children:["The account owner, also known as the ",(0,o.jsx)(t.em,{children:"single owner"})," model, is the foundational ownership type in\nSui. Here, an object is owned by a single account, granting that account exclusive control over the\nobject within the behaviors associated with its type. This model embodies the concept of ",(0,o.jsx)(t.em,{children:"true\nownership"}),", where the account possesses complete authority over the object, making it inaccessible\nto others for modification or transfer. This level of ownership clarity is a significant advantage\nover other blockchain systems, where ownership definitions can be more ambiguous, and smart\ncontracts may have the ability to alter or transfer assets without the owner's consent."]}),"\n",(0,o.jsx)(t.p,{children:"Just like your private mobile phone, you own it, you can easily unlock and operate it, but others cannot.\nSui is designed to prevent things like cracking someone else's phone password (bypassing permission\nchecks to use objects that do not belong to others). Therefore, no one can use your assets unless\nauthorized by you."}),"\n",(0,o.jsx)(t.h2,{id:"shared-state",children:"Shared State"}),"\n",(0,o.jsx)(t.p,{children:'Single owner model has its limitations: for example, it is very tricky to implement a marketplace\nfor digital assets without a shared state. For a generic marketplace scenario, imagine that Alice\nowns an asset X, and she wants to sell it by putting it into a shared marketplace. Then Bob can come\nand buy the asset directly from the marketplace. The reason why this is tricky is that it is\nimpossible to write a smart contract that would "lock" the asset in Alice\'s account and take it out\nwhen Bob buys it. First, it will be a violation of the single owner model, and second, it requires a\nshared access to the asset.'}),"\n",(0,o.jsx)(t.p,{children:"To facilitate a problem of shared data access, Sui has introduced a shared ownership model. In this\nmodel, an object can be shared with the network. Shared objects can be read and modified by any\naccount on the network, and the rules of interaction are defined by the implementation of the\nobject. Typical uses for shared objects are: marketplaces, shared resources, escrows, and other\nscenarios where multiple accounts need access to the same state."}),"\n",(0,o.jsx)(t.h2,{id:"immutable-frozen-state",children:"Immutable (Frozen) State"}),"\n",(0,o.jsxs)(t.p,{children:["Sui also offers the ",(0,o.jsx)(t.em,{children:"frozen object"})," model, where an object becomes permanently read-only. These\nimmutable objects, while readable, cannot be modified or moved, providing a stable and constant\nstate accessible to all network participants. Frozen objects are ideal for public data, reference\nmaterials, and other use cases where the state permanence is desirable."]}),"\n",(0,o.jsx)(t.h2,{id:"object-owner",children:"Object Owner"}),"\n",(0,o.jsxs)(t.p,{children:["The last ownership model in Sui is the ",(0,o.jsx)(t.em,{children:"object owner"}),". In this model, an object is owned by another\nobject. This feature allows creating complex relationships between objects, storing large\nheterogeneous collections, and implementing extensible and modular systems. Practically speaking,\nsince the transactions are initiated by accounts, the transaction still accesses the parent object,\nbut it can then access the child objects through the parent object."]}),"\n",(0,o.jsx)(t.p,{children:'A use case we love to mention is a game character. Alice can own the Hero object from a game, and\nthe Hero can own items: also represented as objects, like a "Map", or a "Compass". Alice may take\nthe "Map" from the "Hero" object, and then send it to Bob, or sell it on a marketplace. With object\nowner, it becomes very natural to imagine how the assets can be structured and managed in relation\nto each other.'}),"\n",(0,o.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Single Owner:"})," Objects are owned by a single account, granting exclusive control over the\nobject."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Shared State:"})," Objects can be shared with the network, allowing multiple accounts to read and\nmodify the object."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Immutable State:"})," Objects become permanently read-only, providing a stable and constant state."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Object Owner:"})," Objects can own other objects, enabling complex relationships and modular\nsystems."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(t.p,{children:"In the next section we will talk about transaction execution paths in Sui, and how the ownership\nmodels affect the transaction execution."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);