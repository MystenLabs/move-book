"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7961],{5521:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var t=s(6672);const i={},r=t.createContext(i);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},9269:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"abilities/object","title":"Sui Object | Reference","description":"For Sui, key is used to signify an object. Objects the only way to store data in Sui--allowing","source":"@site/../reference/abilities/object.md","sourceDirName":"abilities","slug":"/abilities/object","permalink":"/reference/abilities/object","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Sui Object | Reference"}}');var i=s(3420),r=s(5521);const c={title:"Sui Object | Reference"},o="Sui Objects",d={},l=[{value:"Object Rules",id:"object-rules",level:2},{value:"Transfer Rules",id:"transfer-rules",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sui-objects",children:"Sui Objects"})}),"\n",(0,i.jsxs)(n.p,{children:["For Sui, ",(0,i.jsx)(n.code,{children:"key"})," is used to signify an ",(0,i.jsx)(n.em,{children:"object"}),". Objects the only way to store data in Sui--allowing\nthe data to persist between transactions."]}),"\n",(0,i.jsx)(n.p,{children:"For more details, see the Sui documentation on"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sui.io/concepts/object-model",children:"The Object Model"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sui.io/concepts/sui-move-concepts#global-unique",children:"Move Rules for Objects"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sui.io/concepts/transfers",children:"Transferring Objects"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"object-rules",children:"Object Rules"}),"\n",(0,i.jsxs)(n.p,{children:["An object is a ",(0,i.jsx)(n.a,{href:"/reference/structs",children:(0,i.jsx)(n.code,{children:"struct"})})," with the ",(0,i.jsx)(n.a,{href:"/reference/abilities#key",children:(0,i.jsx)(n.code,{children:"key"})})," ability. The first\nfield of the struct must be ",(0,i.jsx)(n.code,{children:"id: sui::object::UID"}),". This 32-byte field (a strongly typed wrapper\naround an ",(0,i.jsx)(n.a,{href:"/reference/primitive-types/address",children:(0,i.jsx)(n.code,{children:"address"})}),") is then used to uniquely identify the object."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that since ",(0,i.jsx)(n.code,{children:"sui::object::UID"})," has only the ",(0,i.jsx)(n.code,{children:"store"})," ability (it does not have ",(0,i.jsx)(n.code,{children:"copy"})," or ",(0,i.jsx)(n.code,{children:"drop"}),"),\nno object has ",(0,i.jsx)(n.code,{children:"copy"})," or ",(0,i.jsx)(n.code,{children:"drop"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"transfer-rules",children:"Transfer Rules"}),"\n",(0,i.jsxs)(n.p,{children:["Objects can be have their ownership changed and transferred in the ",(0,i.jsx)(n.code,{children:"sui::transfer"}),' module. Many\nfunctions in the module have "public" and "private" variant, where the "private" variant can only be\ncalled inside of the module that defines the object\'s type. The "public" variants can be called only\nif the object has ',(0,i.jsx)(n.code,{children:"store"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example if we had two objects ",(0,i.jsx)(n.code,{children:"A"})," and ",(0,i.jsx)(n.code,{children:"B"})," defined in the module ",(0,i.jsx)(n.code,{children:"my_module"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::my_module;\n\npublic struct A has key {\n    id: sui::object::UID,\n}\n\npublic struct B has key, store {\n    id: sui::object::UID,\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"A"})," can only be transferred using the ",(0,i.jsx)(n.code,{children:"sui::transfer::transfer"})," inside of ",(0,i.jsx)(n.code,{children:"a::my_module"}),", while ",(0,i.jsx)(n.code,{children:"B"}),"\ncan be transferred anywhere using ",(0,i.jsx)(n.code,{children:"sui::transfer::public_transfer"}),". These rules are enforced by a\ncustom type system (bytecode verifier) rule in Sui."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);