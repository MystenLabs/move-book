"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3022],{5521:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>r});var s=o(6672);const d={},l=s.createContext(d);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},8196:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"move-basics/module","title":"Module","description":"\x3c!--","source":"@site/../book/move-basics/module.md","sourceDirName":"move-basics","slug":"/move-basics/module","permalink":"/move-basics/module","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"Move Basics","permalink":"/move-basics/"},"next":{"title":"5.2. Comments","permalink":"/move-basics/comments"}}');var d=o(3420),l=o(5521);const t={},r="Module",c={},i=[{value:"Module Declaration",id:"module-declaration",level:2},{value:"Address and Named Address",id:"address-and-named-address",level:2},{value:"Module Members",id:"module-members",level:2},{value:"Module Block",id:"module-block",level:2},{value:"Further Reading",id:"further-reading",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"module",children:"Module"})}),"\n",(0,d.jsx)(n.p,{children:"A module is the base unit of code organization in Move. Modules are used to group and isolate code,\nand all members of the module are private to the module by default. In this section you will learn\nhow to define a module, declare its members, and access it from other modules."}),"\n",(0,d.jsx)(n.h2,{id:"module-declaration",children:"Module Declaration"}),"\n",(0,d.jsxs)(n.p,{children:["Modules are declared using the ",(0,d.jsx)(n.code,{children:"module"})," keyword followed by the package address, module name,\nsemicolon, and the module body. The module name should be in ",(0,d.jsx)(n.code,{children:"snake_case"})," - all lowercase letters\nwith underscores between words. Modules names must be unique in the package."]}),"\n",(0,d.jsxs)(n.p,{children:["Usually, a single file in the ",(0,d.jsx)(n.code,{children:"sources/"})," folder contains a single module. The file name should match\nthe module name - for example, a ",(0,d.jsx)(n.code,{children:"donut_shop"})," module should be stored in the ",(0,d.jsx)(n.code,{children:"donut_shop.move"})," file.\nYou can read more about coding conventions in the\n",(0,d.jsx)(n.a,{href:"./../guides/code-quality-checklist",children:"Coding Conventions"})," section."]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["If you need to declare more than one module in a file, you must use ",(0,d.jsx)(n.a,{href:"#module-block",children:"Module Block"}),"\nsyntax."]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/module-label.move anchor=module",children:"// Module label.\nmodule book::my_module;\n\n// module body\n"})}),"\n",(0,d.jsx)(n.p,{children:"Structs, functions, constants and imports all part of the module:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"./struct",children:"Structs"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"./function",children:"Functions"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"./constants",children:"Constants"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"./importing-modules",children:"Imports"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"./struct-methods",children:"Struct Methods"})}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"address-and-named-address",children:"Address and Named Address"}),"\n",(0,d.jsxs)(n.p,{children:["The module address can be specified as both: an address ",(0,d.jsx)(n.em,{children:"literal"})," (does not require the ",(0,d.jsx)(n.code,{children:"@"})," prefix)\nor a named address specified in the ",(0,d.jsx)(n.a,{href:"./../concepts/manifest",children:"Package Manifest"}),". In the example\nbelow, both are identical because there's a ",(0,d.jsx)(n.code,{children:'book = "0x0"'})," record in the ",(0,d.jsx)(n.code,{children:"[addresses]"})," section of\nthe ",(0,d.jsx)(n.code,{children:"Move.toml"}),"."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/module.move anchor=address_literal",children:"module 0x0::address_literal { /* ... */ }\nmodule book::named_address { /* ... */ }\n"})}),"\n",(0,d.jsx)(n.p,{children:"Addresses section in the Move.toml:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-toml",children:'# Move.toml\n[addresses]\nbook = "0x0"\n'})}),"\n",(0,d.jsx)(n.h2,{id:"module-members",children:"Module Members"}),"\n",(0,d.jsx)(n.p,{children:"Module members are declared inside the module body. To illustrate that, let's define a simple module\nwith a struct, a function and a constant:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/module-members.move anchor=members",children:"module book::my_module_with_members;\n\n// import\nuse book::my_module;\n\n// a constant\nconst CONST: u8 = 0;\n\n// a struct\npublic struct Struct {}\n\n// method alias\npublic use fun function as Struct.struct_fun;\n\n// function\nfun function(_: &Struct) { /* function body */ }\n"})}),"\n",(0,d.jsx)(n.h2,{id:"module-block",children:"Module Block"}),"\n",(0,d.jsxs)(n.p,{children:["The pre-2024 edition of Move required the body of the module to be a ",(0,d.jsx)(n.em,{children:"module block"})," - the contents\nof the module needed to be surrounded by curly braces ",(0,d.jsx)(n.code,{children:"{}"}),". The main reason to use block syntax and\nnot ",(0,d.jsx)(n.em,{children:"label"})," syntax is if you need to define more than one module in a file. However, using module\nblocks is not recommended practice."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/module.move anchor=members",children:"module book::my_block_module_with_members {\n    // import\n    use book::my_module;\n\n    // a constant\n    const CONST: u8 = 0;\n\n    // a struct\n    public struct Struct {}\n\n    // method alias\n    public use fun function as Struct.struct_fun;\n\n    // function\n    fun function(_: &Struct) { /* function body */ }\n}\n\n// module block allows multiple module definitions in the\n// same file but this is not a recommended practice\nmodule book::another_module_in_the_file {\n    // ...\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"./../../reference/modules",children:"Modules"})," in the Move Reference."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}}}]);