"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[707],{1156:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"structs","title":"Structs | Reference","description":"","source":"@site/../reference/structs.md","sourceDirName":".","slug":"/structs","permalink":"/reference/structs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Structs | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"7.1 Macros","permalink":"/reference/functions/macros"},"next":{"title":"9. Enums","permalink":"/reference/enums"}}');var i=o(3420),s=o(5521);const r={title:"Structs | Reference",description:""},a="Structs and Resources",l={},c=[{value:"Defining Structs",id:"defining-structs",level:2},{value:"Visibility",id:"visibility",level:3},{value:"Abilities",id:"abilities",level:3},{value:"Naming",id:"naming",level:3},{value:"Using Structs",id:"using-structs",level:2},{value:"Creating Structs",id:"creating-structs",level:3},{value:"Destroying Structs via Pattern Matching",id:"destroying-structs-via-pattern-matching",level:3},{value:"Accessing Struct Fields",id:"accessing-struct-fields",level:3},{value:"Borrowing Structs and Fields",id:"borrowing-structs-and-fields",level:3},{value:"Reading and Writing Fields",id:"reading-and-writing-fields",level:3},{value:"Privileged Struct Operations",id:"privileged-struct-operations",level:2},{value:"Ownership",id:"ownership",level:2},{value:"Storage",id:"storage",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"structs-and-resources",children:"Structs and Resources"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"struct"})," is a user-defined data structure containing typed fields. Structs can store any\nnon-reference, non-tuple type, including other structs."]}),"\n",(0,i.jsxs)(n.p,{children:['Structs can be used to define all "asset" values or unrestricted values, where the operations\nperformed on those values can be controlled by the struct\'s ',(0,i.jsx)(n.a,{href:"./abilities",children:"abilities"}),". By default,\nstructs are linear and ephemeral. By this we mean that they: cannot be copied, cannot be dropped,\nand cannot be stored in storage. This means that all values have to have ownership transferred\n(linear) and the values must be dealt with by the end of the program's execution (ephemeral). We can\nrelax this behavior by giving the struct ",(0,i.jsx)(n.a,{href:"./abilities",children:"abilities"})," which allow values to be copied\nor dropped and also to be stored in storage or to define storage schemas."]}),"\n",(0,i.jsx)(n.h2,{id:"defining-structs",children:"Defining Structs"}),"\n",(0,i.jsx)(n.p,{children:"Structs must be defined inside a module, and the struct's fields can either be named or positional:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo { x: u64, y: bool }\npublic struct Bar {}\npublic struct Baz { foo: Foo, }\n//                          ^ note: it is fine to have a trailing comma\n\npublic struct PosFoo(u64, bool)\npublic struct PosBar()\npublic struct PosBaz(Foo)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Structs cannot be recursive, so the following definitions are invalid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"public struct Foo { x: Foo }\n//                     ^ ERROR! recursive definition\n\npublic struct A { b: B }\npublic struct B { a: A }\n//                   ^ ERROR! recursive definition\n\npublic struct D(D)\n//              ^ ERROR! recursive definition\n"})}),"\n",(0,i.jsx)(n.h3,{id:"visibility",children:"Visibility"}),"\n",(0,i.jsxs)(n.p,{children:["As you may have noticed, all structs are declared as ",(0,i.jsx)(n.code,{children:"public"}),". This means that the type of the\nstruct can be referred to from any other module. However, the fields of the struct, and the ability\nto create or destroy the struct, are still internal to the module that defines the struct."]}),"\n",(0,i.jsxs)(n.p,{children:["In the future, we plan on adding to declare structs as ",(0,i.jsx)(n.code,{children:"public(package)"})," or as internal, much like\n",(0,i.jsx)(n.a,{href:"./functions#visibility",children:"functions"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"abilities",children:"Abilities"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned above: by default, a struct declaration is linear and ephemeral. So to allow the value\nto be used in these ways (e.g., copied, dropped, stored in an ",(0,i.jsx)(n.a,{href:"./abilities/object",children:"object"}),", or\nused to define a storable ",(0,i.jsx)(n.a,{href:"./abilities/object",children:"object"}),"), structs can be granted\n",(0,i.jsx)(n.a,{href:"./abilities",children:"abilities"})," by annotating them with ",(0,i.jsx)(n.code,{children:"has <ability>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m {\n    public struct Foo has copy, drop { x: u64, y: bool }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The ability declaration can occur either before or after the struct's fields. However, only one or\nthe other can be used, and not both. If declared after the struct's fields, the ability declaration\nmust be terminated with a semicolon:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct PreNamedAbilities has copy, drop { x: u64, y: bool }\npublic struct PostNamedAbilities { x: u64, y: bool } has copy, drop;\npublic struct PostNamedAbilitiesInvalid { x: u64, y: bool } has copy, drop\n//                                                                        ^ ERROR! missing semicolon\n\npublic struct NamedInvalidAbilities has copy { x: u64, y: bool } has drop;\n//                                                               ^ ERROR! duplicate ability declaration\n\npublic struct PrePositionalAbilities has copy, drop (u64, bool)\npublic struct PostPositionalAbilities (u64, bool) has copy, drop;\npublic struct PostPositionalAbilitiesInvalid (u64, bool) has copy, drop\n//                                                                     ^ ERROR! missing semicolon\npublic struct InvalidAbilities has copy (u64, bool) has drop;\n//                                                  ^ ERROR! duplicate ability declaration\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more details, see the section on\n",(0,i.jsx)(n.a,{href:"./abilities#annotating-structs-and-enums",children:"annotating a struct's abilities"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"naming",children:"Naming"}),"\n",(0,i.jsxs)(n.p,{children:["Structs must start with a capital letter ",(0,i.jsx)(n.code,{children:"A"})," to ",(0,i.jsx)(n.code,{children:"Z"}),". After the first letter, struct names can\ncontain underscores ",(0,i.jsx)(n.code,{children:"_"}),", letters ",(0,i.jsx)(n.code,{children:"a"})," to ",(0,i.jsx)(n.code,{children:"z"}),", letters ",(0,i.jsx)(n.code,{children:"A"})," to ",(0,i.jsx)(n.code,{children:"Z"}),", or digits ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"9"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"public struct Foo {}\npublic struct BAR {}\npublic struct B_a_z_4_2 {}\npublic struct P_o_s_Foo()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This naming restriction of starting with ",(0,i.jsx)(n.code,{children:"A"})," to ",(0,i.jsx)(n.code,{children:"Z"})," is in place to give room for future language\nfeatures. It may or may not be removed later."]}),"\n",(0,i.jsx)(n.h2,{id:"using-structs",children:"Using Structs"}),"\n",(0,i.jsx)(n.h3,{id:"creating-structs",children:"Creating Structs"}),"\n",(0,i.jsx)(n.p,{children:'Values of a struct type can be created (or "packed") by indicating the struct name, followed by\nvalue for each field.'}),"\n",(0,i.jsxs)(n.p,{children:["For a struct with named fields, the order of the fields does not matter, but the field name needs to\nbe provided. For a struct with positional fields, the order of the fields must match the order of\nthe fields in the struct definition, and it must be created using ",(0,i.jsx)(n.code,{children:"()"})," instead of ",(0,i.jsx)(n.code,{children:"{}"})," to enclose\nthe parameters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo has drop { x: u64, y: bool }\npublic struct Baz has drop { foo: Foo }\npublic struct Positional(u64, bool) has drop;\n\nfun example() {\n    let foo = Foo { x: 0, y: false };\n    let baz = Baz { foo: foo };\n    // Note: positional struct values are created using parentheses and\n    // based on position instead of name.\n    let pos = Positional(0, false);\n    let pos_invalid = Positional(false, 0);\n    //                           ^ ERROR! Fields are out of order and the types don't match.\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For structs with named fields, you can use the following shorthand if you have a local variable with\nthe same name as the field:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let baz = Baz { foo: foo };\n// is equivalent to\nlet baz = Baz { foo };\n"})}),"\n",(0,i.jsx)(n.p,{children:'This is sometimes called "field name punning".'}),"\n",(0,i.jsx)(n.h3,{id:"destroying-structs-via-pattern-matching",children:"Destroying Structs via Pattern Matching"}),"\n",(0,i.jsx)(n.p,{children:"Struct values can be destroyed by binding or assigning them in patterns using similar syntax to\nconstructing them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo { x: u64, y: bool }\npublic struct Bar(Foo)\npublic struct Baz {}\npublic struct Qux()\n\nfun example_destroy_foo() {\n    let foo = Foo { x: 3, y: false };\n    let Foo { x, y: foo_y } = foo;\n    //        ^ shorthand for `x: x`\n\n    // two new bindings\n    //   x: u64 = 3\n    //   foo_y: bool = false\n}\n\nfun example_destroy_foo_wildcard() {\n    let foo = Foo { x: 3, y: false };\n    let Foo { x, y: _ } = foo;\n\n    // only one new binding since y was bound to a wildcard\n    //   x: u64 = 3\n}\n\nfun example_destroy_foo_assignment() {\n    let x: u64;\n    let y: bool;\n    Foo { x, y } = Foo { x: 3, y: false };\n\n    // mutating existing variables x and y\n    //   x = 3, y = false\n}\n\nfun example_foo_ref() {\n    let foo = Foo { x: 3, y: false };\n    let Foo { x, y } = &foo;\n\n    // two new bindings\n    //   x: &u64\n    //   y: &bool\n}\n\nfun example_foo_ref_mut() {\n    let foo = Foo { x: 3, y: false };\n    let Foo { x, y } = &mut foo;\n\n    // two new bindings\n    //   x: &mut u64\n    //   y: &mut bool\n}\n\nfun example_destroy_bar() {\n    let bar = Bar(Foo { x: 3, y: false });\n    let Bar(Foo { x, y }) = bar;\n    //            ^ nested pattern\n\n    // two new bindings\n    //   x: u64 = 3\n    //   y: bool = false\n}\n\nfun example_destroy_baz() {\n    let baz = Baz {};\n    let Baz {} = baz;\n}\n\nfun example_destroy_qux() {\n    let qux = Qux();\n    let Qux() = qux;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"accessing-struct-fields",children:"Accessing Struct Fields"}),"\n",(0,i.jsxs)(n.p,{children:["Fields of a struct can be accessed using the dot operator ",(0,i.jsx)(n.code,{children:"."}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For structs with named fields, the fields can be accessed by their name:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"public struct Foo { x: u64, y: bool }\nlet foo = Foo { x: 3, y: true };\nlet x = foo.x;  // x == 3\nlet y = foo.y;  // y == true\n"})}),"\n",(0,i.jsx)(n.p,{children:"For positional structs, fields can be accessed by their position in the struct definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"public struct PosFoo(u64, bool)\nlet pos_foo = PosFoo(3, true);\nlet x = pos_foo.0;  // x == 3\nlet y = pos_foo.1;  // y == true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Accessing struct fields without borrowing or copying them is subject to the field's ability\nconstraints. For more details see the sections on\n",(0,i.jsx)(n.a,{href:"#borrowing-structs-and-fields",children:"borrowing structs and fields"})," and\n",(0,i.jsx)(n.a,{href:"#reading-and-writing-fields",children:"reading and writing fields"})," for more information."]}),"\n",(0,i.jsx)(n.h3,{id:"borrowing-structs-and-fields",children:"Borrowing Structs and Fields"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"&"})," and ",(0,i.jsx)(n.code,{children:"&mut"})," operator can be used to create references to structs or fields. These examples\ninclude some optional type annotations (e.g., ",(0,i.jsx)(n.code,{children:": &Foo"}),") to demonstrate the type of operations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet foo_ref: &Foo = &foo;\nlet y: bool = foo_ref.y;         // reading a field via a reference to the struct\nlet x_ref: &u64 = &foo.x;        // borrowing a field by extending a reference to the struct\n\nlet x_ref_mut: &mut u64 = &mut foo.x;\n*x_ref_mut = 42;            // modifying a field via a mutable reference\n"})}),"\n",(0,i.jsx)(n.p,{children:"It is possible to borrow inner fields of nested structs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet bar = Bar(foo);\n\nlet x_ref = &bar.0.x;\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also borrow a field via a reference to a struct:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet foo_ref = &foo;\nlet x_ref = &foo_ref.x;\n// this has the same effect as let x_ref = &foo.x\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reading-and-writing-fields",children:"Reading and Writing Fields"}),"\n",(0,i.jsx)(n.p,{children:"If you need to read and copy a field's value, you can then dereference the borrowed field:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet bar = Bar(copy foo);\nlet x: u64 = *&foo.x;\nlet y: bool = *&foo.y;\nlet foo2: Foo = *&bar.0;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["More canonically, the dot operator can be used to read fields of a struct without any borrowing. As\nis true with\n",(0,i.jsx)(n.a,{href:"./primitive-types/references#reading-and-writing-through-references",children:"dereferencing"}),", the field\ntype must have the ",(0,i.jsx)(n.code,{children:"copy"})," ",(0,i.jsx)(n.a,{href:"./abilities",children:"ability"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet x = foo.x;  // x == 3\nlet y = foo.y;  // y == true\n"})}),"\n",(0,i.jsx)(n.p,{children:"Dot operators can be chained to access nested fields:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let bar = Bar(Foo { x: 3, y: true });\nlet x = baz.0.x; // x = 3;\n"})}),"\n",(0,i.jsx)(n.p,{children:"However, this is not permitted for fields that contain non-primitive types, such a vector or another\nstruct:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet bar = Bar(foo);\nlet foo2: Foo = *&bar.0;\nlet foo3: Foo = bar.0; // error! must add an explicit copy with *&\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can mutably borrow a field to a struct to assign it a new value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let mut foo = Foo { x: 3, y: true };\n*&mut foo.x = 42;     // foo = Foo { x: 42, y: true }\n*&mut foo.y = !foo.y; // foo = Foo { x: 42, y: false }\nlet mut bar = Bar(foo);               // bar = Bar(Foo { x: 42, y: false })\n*&mut bar.0.x = 52;                   // bar = Bar(Foo { x: 52, y: false })\n*&mut bar.0 = Foo { x: 62, y: true }; // bar = Bar(Foo { x: 62, y: true })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similar to dereferencing, we can instead directly use the dot operator to modify a field. And in\nboth cases, the field type must have the ",(0,i.jsx)(n.code,{children:"drop"})," ",(0,i.jsx)(n.a,{href:"./abilities",children:"ability"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let mut foo = Foo { x: 3, y: true };\nfoo.x = 42;     // foo = Foo { x: 42, y: true }\nfoo.y = !foo.y; // foo = Foo { x: 42, y: false }\nlet mut bar = Bar(foo);         // bar = Bar(Foo { x: 42, y: false })\nbar.0.x = 52;                   // bar = Bar(Foo { x: 52, y: false })\nbar.0 = Foo { x: 62, y: true }; // bar = Bar(Foo { x: 62, y: true })\n"})}),"\n",(0,i.jsx)(n.p,{children:"The dot syntax for assignment also works via a reference to a struct:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"let foo = Foo { x: 3, y: true };\nlet foo_ref = &mut foo;\nfoo_ref.x = foo_ref.x + 1;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"privileged-struct-operations",children:"Privileged Struct Operations"}),"\n",(0,i.jsxs)(n.p,{children:["Most struct operations on a struct type ",(0,i.jsx)(n.code,{children:"T"})," can only be performed inside the module that declares\n",(0,i.jsx)(n.code,{children:"T"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Struct types can only be created ("packed"), destroyed ("unpacked") inside the module that defines\nthe struct.'}),"\n",(0,i.jsx)(n.li,{children:"The fields of a struct are only accessible inside the module that defines the struct."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Following these rules, if you want to modify your struct outside the module, you will need to\nprovide public APIs for them. The end of the chapter contains some examples of this."}),"\n",(0,i.jsxs)(n.p,{children:["However as stated ",(0,i.jsx)(n.a,{href:"#visibility",children:"in the visibility section above"}),", struct ",(0,i.jsx)(n.em,{children:"types"})," are always visible\nto another module"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m {\n    public struct Foo has drop { x: u64 }\n\n    public fun new_foo(): Foo {\n        Foo { x: 42 }\n    }\n}\n\nmodule a::n {\n    use a::m::Foo;\n\n    public struct Wrapper has drop {\n        foo: Foo\n        //   ^ valid the type is public\n\n    }\n\n    fun f1(foo: Foo) {\n        let x = foo.x;\n        //      ^ ERROR! cannot access fields of `Foo` outside of `a::m`\n    }\n\n    fun f2() {\n        let foo_wrapper = Wrapper { foo: m::new_foo() };\n        //                               ^ valid the function is public\n    }\n}\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ownership",children:"Ownership"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned above in ",(0,i.jsx)(n.a,{href:"#defining-structs",children:"Defining Structs"}),", structs are by default linear and\nephemeral. This means they cannot be copied or dropped. This property can be very useful when\nmodeling real world assets like money, as you do not want money to be duplicated or get lost in\ncirculation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo { x: u64 }\n\npublic fun copying() {\n    let foo = Foo { x: 100 };\n    let foo_copy = copy foo; // ERROR! 'copy'-ing requires the 'copy' ability\n    let foo_ref = &foo;\n    let another_copy = *foo_ref // ERROR! dereference requires the 'copy' ability\n}\n\npublic fun destroying_1() {\n    let foo = Foo { x: 100 };\n\n    // error! when the function returns, foo still contains a value.\n    // This destruction requires the 'drop' ability\n}\n\npublic fun destroying_2(f: &mut Foo) {\n    *f = Foo { x: 100 } // error!\n                        // destroying the old value via a write requires the 'drop' ability\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To fix the example ",(0,i.jsx)(n.code,{children:"fun destroying_1"}),', you would need to manually "unpack" the value:']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo { x: u64 }\n\npublic fun destroying_1_fixed() {\n    let foo = Foo { x: 100 };\n    let Foo { x: _ } = foo;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Recall that you are only able to deconstruct a struct within the module in which it is defined. This\ncan be leveraged to enforce certain invariants in a system, for example, conservation of money."}),"\n",(0,i.jsxs)(n.p,{children:["If on the other hand, your struct does not represent something valuable, you can add the abilities\n",(0,i.jsx)(n.code,{children:"copy"})," and ",(0,i.jsx)(n.code,{children:"drop"})," to get a struct value that might feel more familiar from other programming\nlanguages:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-move",children:"module a::m;\n\npublic struct Foo has copy, drop { x: u64 }\n\npublic fun run() {\n    let foo = Foo { x: 100 };\n    let foo_copy = foo;\n    //             ^ this code copies foo,\n    //             whereas `let x = move foo` would move foo\n\n    let x = foo.x;            // x = 100\n    let x_copy = foo_copy.x;  // x = 100\n\n    // both foo and foo_copy are implicitly discarded when the function returns\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"storage",children:"Storage"}),"\n",(0,i.jsxs)(n.p,{children:["Structs can be used to define storage schemas, but the details are different per deployment of Move.\nSee the documentation for the ",(0,i.jsxs)(n.a,{href:"./abilities#key",children:[(0,i.jsx)(n.code,{children:"key"})," ability"]})," and\n",(0,i.jsx)(n.a,{href:"./abilities/object",children:"Sui objects"})," for more details."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5521:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(6672);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);