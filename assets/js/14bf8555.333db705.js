"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[515],{5521:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>o});var l=n(6672);const a={},t=l.createContext(a);function s(e){const i=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),l.createElement(t.Provider,{value:i},e.children)}},8817:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"move-basics/visibility","title":"Visibility Modifiers","description":"Every module member has a visibility. By default, all module members are private - meaning they","source":"@site/../book/move-basics/visibility.md","sourceDirName":"move-basics","slug":"/move-basics/visibility","permalink":"/move-basics/visibility","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.19. Struct Methods","permalink":"/move-basics/struct-methods"},"next":{"title":"5.21. Ownership and Scope","permalink":"/move-basics/ownership-and-scope"}}');var a=n(3420),t=n(5521);const s={},o="Visibility Modifiers",r={},c=[{value:"Internal Visibility",id:"internal-visibility",level:2},{value:"Public Visibility",id:"public-visibility",level:2},{value:"Package Visibility",id:"package-visibility",level:2},{value:"Native Functions",id:"native-functions",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"visibility-modifiers",children:"Visibility Modifiers"})}),"\n",(0,a.jsxs)(i.p,{children:["Every module member has a visibility. By default, all module members are ",(0,a.jsx)(i.em,{children:"private"})," - meaning they\nare only accessible within the module they are defined in. However, you can add a visibility\nmodifier to make a module member ",(0,a.jsx)(i.em,{children:"public"})," - visible outside the module, or ",(0,a.jsx)(i.em,{children:"public(package)"})," -\nvisible in the modules within the same package, or ",(0,a.jsx)(i.em,{children:"entry"})," - can be called from a transaction but\ncan't be called from other modules."]}),"\n",(0,a.jsx)(i.h2,{id:"internal-visibility",children:"Internal Visibility"}),"\n",(0,a.jsxs)(i.p,{children:["A function or a struct defined in a module which has no visibility modifier is ",(0,a.jsx)(i.em,{children:"private"})," to the\nmodule. It can't be called from other modules."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::internal_visibility;\n\n// This function can be called from other functions in the same module\nfun internal() { /* ... */ }\n\n// Same module -> can call internal()\nfun call_internal() {\n    internal();\n}\n"})}),"\n",(0,a.jsx)(i.p,{children:"The following code will not compile:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::try_calling_internal;\n\nuse book::internal_visibility;\n\n// Different module -> can't call internal()\nfun try_calling_internal() {\n    internal_visibility::internal();\n}\n"})}),"\n",(0,a.jsx)(i.p,{children:"Note that just because a struct field is not visible from Move does not mean that its value is kept\nconfidential \u2014 it is always possible to read the contents of an on-chain object from outside\nof Move. You should never store unencrypted secrets inside of objects."}),"\n",(0,a.jsx)(i.h2,{id:"public-visibility",children:"Public Visibility"}),"\n",(0,a.jsxs)(i.p,{children:["A struct or a function can be made ",(0,a.jsx)(i.em,{children:"public"})," by adding the ",(0,a.jsx)(i.code,{children:"public"})," keyword before the ",(0,a.jsx)(i.code,{children:"fun"})," or\n",(0,a.jsx)(i.code,{children:"struct"})," keyword."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::public_visibility;\n\n// This function can be called from other modules\npublic fun public_fun() { /* ... */ }\n"})}),"\n",(0,a.jsx)(i.p,{children:"A public function can be imported and called from other modules. The following code will compile:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::try_calling_public;\n\nuse book::public_visibility;\n\n// Different module -> can call public_fun()\nfun try_calling_public() {\n    public_visibility::public_fun();\n}\n"})}),"\n",(0,a.jsx)(i.p,{children:"Unlike some languages, struct fields cannot be made public."}),"\n",(0,a.jsx)(i.h2,{id:"package-visibility",children:"Package Visibility"}),"\n",(0,a.jsxs)(i.p,{children:["A function with ",(0,a.jsx)(i.em,{children:"package"})," visibility can be called from any module within the same package, but not\nfrom modules in other packages. In other words, it is ",(0,a.jsx)(i.em,{children:"internal"})," to the package."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::package_visibility;\n\npublic(package) fun package_only() { /* ... */ }\n"})}),"\n",(0,a.jsx)(i.p,{children:"A package function can be called from any module within the same package:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module book::try_calling_package;\n\nuse book::package_visibility;\n\n// Same package `book` -> can call package_only()\nfun try_calling_package() {\n    package_visibility::package_only();\n}\n"})}),"\n",(0,a.jsx)(i.h2,{id:"native-functions",children:"Native Functions"}),"\n",(0,a.jsxs)(i.p,{children:["Some functions in the ",(0,a.jsx)(i.a,{href:"./../programmability/sui-framework",children:"framework"})," and\n",(0,a.jsx)(i.a,{href:"./standard-library",children:"standard library"})," are marked with the ",(0,a.jsx)(i.code,{children:"native"})," modifier. These functions are\nnatively provided by the Move VM and do not have a body in Move source code. To learn more about the\nnative modifier, refer to the\n",(0,a.jsx)(i.a,{href:"./../../reference/functions?highlight=native#native-functions",children:"Move Reference"}),"."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-move",children:"module std::type_name;\n\npublic native fun get<T>(): TypeName;\n"})}),"\n",(0,a.jsxs)(i.p,{children:["This is an example from ",(0,a.jsx)(i.code,{children:"std::type_name"}),", learn more about this module in the\n",(0,a.jsx)(i.a,{href:"./type-reflection",children:"reflection chapter"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"./../../reference/functions#visibility",children:"Visibility"})," in the Move Reference."]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);