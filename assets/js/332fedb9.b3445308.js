"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9685],{5521:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6672);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},5700:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"programmability/events","title":"Events","description":"Events are a way to notify off-chain listeners about on-chain events. They are used to emit","source":"@site/../book/programmability/events.md","sourceDirName":"programmability","slug":"/programmability/events","permalink":"/programmability/events","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.13. Object Display","permalink":"/programmability/display"},"next":{"title":"8.15. Sui Framework","permalink":"/programmability/sui-framework"}}');var a=n(3420),s=n(5521);const r={},o="Events",c={},d=[{value:"Emitting Events",id:"emitting-events",level:2},{value:"Event Structure",id:"event-structure",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"events",children:"Events"})}),"\n",(0,a.jsxs)(t.p,{children:["Events are a way to notify off-chain listeners about on-chain events. They are used to emit\nadditional information about the transaction that is not stored - and, hence, can't be accessed -\non-chain. Events are emitted by the ",(0,a.jsx)(t.code,{children:"sui::event"})," module located in the\n",(0,a.jsx)(t.a,{href:"./sui-framework",children:"Sui Framework"}),"."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Any custom type with the ",(0,a.jsx)(t.a,{href:"./../move-basics/copy-ability",children:"copy"})," and\n",(0,a.jsx)(t.a,{href:"./../move-basics/drop-ability",children:"drop"})," abilities can be emitted as an event. Sui Verifier requires\nthe type to be internal to the module."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-move",children:"module sui::event;\n\n/// Emit a custom Move event, sending the data off-chain.\n///\n/// Used for creating custom indexes and tracking on-chain\n/// activity in a way that suits a specific application the most.\n///\n/// The type `T` is the main way to index the event, and can contain\n/// phantom parameters, eg `emit(MyEvent<phantom T>)`.\npublic native fun emit<T: copy + drop>(event: T);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"emitting-events",children:"Emitting Events"}),"\n",(0,a.jsxs)(t.p,{children:["Events are emitted using the ",(0,a.jsx)(t.code,{children:"emit"})," function in the ",(0,a.jsx)(t.code,{children:"sui::event"})," module. The function takes a single\nargument - the event to be emitted. The event data is passed by value,"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/events.move anchor=emit",children:"module book::events;\n\nuse sui::coin::Coin;\nuse sui::sui::SUI;\nuse sui::event;\n\n/// The item that can be purchased.\npublic struct Item has key { id: UID }\n\n/// Event emitted when an item is purchased. Contains the ID of the item and\n/// the price for which it was purchased.\npublic struct ItemPurchased has copy, drop {\n    item: ID,\n    price: u64\n}\n\n/// A marketplace function which performs the purchase of an item.\npublic fun purchase(coin: Coin<SUI>, ctx: &mut TxContext) {\n    let item = Item { id: object::new(ctx) };\n\n    // Create an instance of `ItemPurchased` and pass it to `event::emit`.\n    event::emit(ItemPurchased {\n        item: object::id(&item),\n        price: coin.value()\n    });\n\n    // Omitting the rest of the implementation to keep the example simple.\n    abort\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The Sui Verifier requires the type passed to the ",(0,a.jsx)(t.code,{children:"emit"})," function to be ",(0,a.jsx)(t.em,{children:"internal to the module"}),". So\nemitting a type from another module will result in a compilation error. Primitive types, although\nthey match the ",(0,a.jsx)(t.em,{children:"copy"})," and ",(0,a.jsx)(t.em,{children:"drop"})," requirement, are not allowed to be emitted as events."]}),"\n",(0,a.jsx)(t.h2,{id:"event-structure",children:"Event Structure"}),"\n",(0,a.jsxs)(t.p,{children:["Events are a part of the transaction result and are stored in the ",(0,a.jsx)(t.em,{children:"transaction effects"}),". As such,\nthey natively have the ",(0,a.jsx)(t.code,{children:"sender"}),' field which is the address who sent the transaction. So adding a\n"sender" field to the event is not necessary. Similarly, event metadata contains the timestamp. But\nit is important to note that the timestamp is relative to the node and may vary a little from node\nto node.']})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);