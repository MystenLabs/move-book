"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3047],{2039:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"abort-and-assert","title":"Abort and Assert | Reference","description":"","source":"@site/../reference/abort-and-assert.md","sourceDirName":".","slug":"/abort-and-assert","permalink":"/reference/abort-and-assert","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Abort and Assert | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"4. Equality","permalink":"/reference/equality"},"next":{"title":"5.1 Clever Errors","permalink":"/reference/abort-and-assert/clever-errors"}}');var s=t(3420),o=t(5521);const a={title:"Abort and Assert | Reference",description:""},c="Abort and Assert",i={},l=[{value:"<code>abort</code>",id:"abort",level:2},{value:"<code>assert</code>",id:"assert",level:3},{value:"Abort codes in the Move VM",id:"abort-codes-in-the-move-vm",level:3},{value:"The type of <code>abort</code>",id:"the-type-of-abort",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"abort-and-assert",children:"Abort and Assert"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"./functions",children:(0,s.jsx)(n.code,{children:"return"})})," and ",(0,s.jsx)(n.code,{children:"abort"})," are two control flow constructs that end execution, one for\nthe current function and one for the entire transaction."]}),"\n",(0,s.jsxs)(n.p,{children:["More information on ",(0,s.jsxs)(n.a,{href:"./functions#return-expression",children:[(0,s.jsx)(n.code,{children:"return"})," can be found in the linked section"]})]}),"\n",(0,s.jsx)(n.h2,{id:"abort",children:(0,s.jsx)(n.code,{children:"abort"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"abort"})," is an expression that takes either takes no arguments, or just one - an ",(0,s.jsx)(n.strong,{children:"abort code"})," of\ntype ",(0,s.jsx)(n.code,{children:"u64"}),". For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"abort\nabort 42\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"abort"}),' expression halts execution the current function and reverts all changes made to state by\nthe current transaction (note though that this guarantee must be upheld by the adapter of the\nspecific deployment of Move). There is no mechanism for "catching" or otherwise handling an ',(0,s.jsx)(n.code,{children:"abort"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Luckily, in Move transactions are all or nothing, meaning any changes to storage are made all at\nonce only if the transaction succeeds. For Sui, this means no objects are modified."}),"\n",(0,s.jsx)(n.p,{children:"Because of this transactional commitment of changes, after an abort there is no need to worry about\nbacking out changes. While this approach is lacking in flexibility, it is incredibly simple and\npredictable."}),"\n",(0,s.jsxs)(n.p,{children:["Similar to ",(0,s.jsx)(n.a,{href:"./functions",children:(0,s.jsx)(n.code,{children:"return"})}),", ",(0,s.jsx)(n.code,{children:"abort"})," is useful for exiting control flow when some\ncondition cannot be met."]}),"\n",(0,s.jsx)(n.p,{children:"In this example, the function will pop two items off of the vector, but will abort early if the\nvector does not have two items"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"use std::vector;\n\nfun pop_twice<T>(v: &mut vector<T>): (T, T) {\n    if (v.length() < 2) abort 42;\n    (v.pop_back(), v.pop_back())\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is even more useful deep inside a control-flow construct. For example, this function checks\nthat all numbers in the vector are less than the specified ",(0,s.jsx)(n.code,{children:"bound"}),". And aborts otherwise"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"use std::vector;\nfun check_vec(v: &vector<u64>, bound: u64) {\n    let i = 0;\n    let n = v.length();\n    while (i < n) {\n        let cur = v[i];\n        if (cur > bound) abort 42;\n        i = i + 1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"assert",children:(0,s.jsx)(n.code,{children:"assert"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert"})," is a builtin, macro operation provided by the Move compiler. It takes two arguments, a\ncondition of type ",(0,s.jsx)(n.code,{children:"bool"})," and a code of type ",(0,s.jsx)(n.code,{children:"u64"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"assert!(condition: bool, code: u64)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Since the operation is a macro, it must be invoked with the ",(0,s.jsx)(n.code,{children:"!"}),". This is to convey that the\narguments to ",(0,s.jsx)(n.code,{children:"assert"})," are call-by-expression. In other words, ",(0,s.jsx)(n.code,{children:"assert"})," is not a normal function and\ndoes not exist at the bytecode level. It is replaced inside the compiler with"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"if (condition) () else abort code\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert"})," is more commonly used than just ",(0,s.jsx)(n.code,{children:"abort"})," by itself. The ",(0,s.jsx)(n.code,{children:"abort"})," examples above can be\nrewritten using ",(0,s.jsx)(n.code,{children:"assert"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"use std::vector;\nfun pop_twice<T>(v: &mut vector<T>): (T, T) {\n    assert!(v.length() >= 2, 42); // Now uses 'assert'\n    (v.pop_back(), v.pop_back())\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"and"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"use std::vector;\nfun check_vec(v: &vector<u64>, bound: u64) {\n    let i = 0;\n    let n = v.length();\n    while (i < n) {\n        let cur = v[i];\n        assert!(cur <= bound, 42); // Now uses 'assert'\n        i = i + 1;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that because the operation is replaced with this ",(0,s.jsx)(n.code,{children:"if-else"}),", the argument for the ",(0,s.jsx)(n.code,{children:"code"})," is not\nalways evaluated. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"assert!(true, 1 / 0)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Will not result in an arithmetic error, it is equivalent to"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"if (true) () else (1 / 0)\n"})}),"\n",(0,s.jsx)(n.p,{children:"So the arithmetic expression is never evaluated!"}),"\n",(0,s.jsx)(n.h3,{id:"abort-codes-in-the-move-vm",children:"Abort codes in the Move VM"}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"abort"}),", it is important to understand how the ",(0,s.jsx)(n.code,{children:"u64"})," code will be used by the VM."]}),"\n",(0,s.jsx)(n.p,{children:"Normally, after successful execution, the Move VM, and the adapter for the specific deployment,\ndetermine the changes made to storage."}),"\n",(0,s.jsxs)(n.p,{children:["If an ",(0,s.jsx)(n.code,{children:"abort"})," is reached, the VM will instead indicate an error. Included in that error will be two\npieces of information:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The module that produced the abort (package/address value and module name)"}),"\n",(0,s.jsx)(n.li,{children:"The abort code."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module 0x2::example {\n    public fun aborts() {\n        abort 42\n    }\n}\n\nmodule 0x3::invoker {\n    public fun always_aborts() {\n        0x2::example::aborts()\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If a transaction, such as the function ",(0,s.jsx)(n.code,{children:"always_aborts"})," above, calls ",(0,s.jsx)(n.code,{children:"0x2::example::aborts"}),", the VM\nwould produce an error that indicated the module ",(0,s.jsx)(n.code,{children:"0x2::example"})," and the code ",(0,s.jsx)(n.code,{children:"42"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This can be useful for having multiple aborts being grouped together inside a module."}),"\n",(0,s.jsx)(n.p,{children:"In this example, the module has two separate error codes used in multiple functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module 0::example;\n\nuse std::vector;\n\nconst EEmptyVector: u64 = 0;\nconst EIndexOutOfBounds: u64 = 1;\n\n// move i to j, move j to k, move k to i\npublic fun rotate_three<T>(v: &mut vector<T>, i: u64, j: u64, k: u64) {\n    let n = v.length();\n    assert!(n > 0, EEmptyVector);\n    assert!(i < n, EIndexOutOfBounds);\n    assert!(j < n, EIndexOutOfBounds);\n    assert!(k < n, EIndexOutOfBounds);\n\n    v.swap(i, k);\n    v.swap(j, k);\n}\n\npublic fun remove_twice<T>(v: &mut vector<T>, i: u64, j: u64): (T, T) {\n    let n = v.length();\n    assert!(n > 0, EEmptyVector);\n    assert!(i < n, EIndexOutOfBounds);\n    assert!(j < n, EIndexOutOfBounds);\n    assert!(i > j, EIndexOutOfBounds);\n\n    (v.remove(i), v.remove(j))\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"the-type-of-abort",children:["The type of ",(0,s.jsx)(n.code,{children:"abort"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"abort i"})," expression can have any type! This is because both constructs break from the normal\ncontrol flow, so they never need to evaluate to the value of that type."]}),"\n",(0,s.jsx)(n.p,{children:"The following are not useful, but they will type check"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"let y: address = abort 0;\n"})}),"\n",(0,s.jsx)(n.p,{children:"This behavior can be helpful in situations where you have a branching instruction that produces a\nvalue on some branches, but not all. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"let b =\n    if (x == 0) false\n    else if (x == 1) true\n    else abort 42;\n//       ^^^^^^^^ `abort 42` has type `bool`\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5521:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6672);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);