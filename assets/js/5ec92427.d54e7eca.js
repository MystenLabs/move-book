"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8750],{2643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"programmability/display","title":"Object Display","description":"Objects on Sui are explicit in their structure and behavior and can be displayed in an","source":"@site/../book/programmability/display.md","sourceDirName":"programmability","slug":"/programmability/display","permalink":"/programmability/display","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.12. Publisher Authority","permalink":"/programmability/publisher"},"next":{"title":"8.14. Events","permalink":"/programmability/events"}}');var s=n(3420),a=n(5521);const r={},l="Object Display",o={},d=[{value:"Background",id:"background",level:2},{value:"Object Display",id:"object-display-1",level:2},{value:"Creator Privilege",id:"creator-privilege",level:2},{value:"Standard Fields",id:"standard-fields",level:2},{value:"Working with Display",id:"working-with-display",level:2},{value:"Template Syntax",id:"template-syntax",level:2},{value:"Multiple Display Objects",id:"multiple-display-objects",level:2},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"object-display",children:"Object Display"})}),"\n",(0,s.jsxs)(t.p,{children:['Objects on Sui are explicit in their structure and behavior and can be displayed in an\nunderstandable way. However, to support richer metadata for clients, there\'s a standard and\nefficient way of "describing" them to the client - the ',(0,s.jsx)(t.code,{children:"Display"})," object defined in the\n",(0,s.jsx)(t.a,{href:"./sui-framework",children:"Sui Framework"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,s.jsx)(t.p,{children:"Historically, there were different attempts to agree on a standard structure of an object so it can\nbe displayed in a user interface. One of the approaches was to define certain fields in the object\nstruct which, when present, would be used in the UI. This approach was not flexible enough and\nrequired developers to define the same fields in every object, and sometimes the fields did not make\nsense for the object."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/display.move anchor=background",children:"/// An attempt to standardize the object structure for display.\npublic struct CounterWithDisplay has key {\n    id: UID,\n    /// If this field is present it will be displayed in the UI as `name`.\n    name: String,\n    /// If this field is present it will be displayed in the UI as `description`.\n    description: String,\n    // ...\n    image: String,\n    /// Actual fields of the object.\n    counter: u64,\n    // ...\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:'If any of the fields contained static data, it would be duplicated in every object. And, since Move\ndoes not have interfaces, it is not possible to know if an object has a specific field without\n"manually" checking the object\'s type, which makes the client fetching more complex.'}),"\n",(0,s.jsx)(t.h2,{id:"object-display-1",children:"Object Display"}),"\n",(0,s.jsx)(t.p,{children:"To address these issues, Sui introduces a standard way of describing an object for display. Instead\nof defining fields in the object struct, the display metadata is stored in a separate object, which\nis associated with the type. This way, the display metadata is not duplicated, and it is easy to\nextend and maintain."}),"\n",(0,s.jsx)(t.p,{children:"Another important feature of Sui Display is the ability to define templates and use object fields in\nthose templates. Not only it allows for a more flexible display, but it also frees the developer\nfrom the need to define the same fields with the same names and types in every object."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["The Object Display is natively supported by the\n",(0,s.jsx)(t.a,{href:"https://docs.sui.io/guides/operator/sui-full-node",children:"Sui Full Node"}),", and the client can fetch the\ndisplay metadata for any object if the object type has a Display associated with it."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/display.move anchor=hero",children:'module book::arena;\n\nuse std::string::String;\nuse sui::package;\nuse sui::display;\n\n/// The One Time Witness to claim the `Publisher` object.\npublic struct ARENA has drop {}\n\n/// Some object which will be displayed.\npublic struct Hero has key {\n    id: UID,\n    class: String,\n    level: u64,\n}\n\n/// In the module initializer we create the `Publisher` object, and then\n/// the Display for the `Hero` type.\nfun init(otw: ARENA, ctx: &mut TxContext) {\n    let publisher = package::claim(otw, ctx);\n    let mut display = display::new<Hero>(&publisher, ctx);\n\n    display.add(\n        b"name".to_string(),\n        b"{class} (lvl. {level})".to_string()\n    );\n\n    display.add(\n        b"description".to_string(),\n        b"One of the greatest heroes of all time. Join us!".to_string()\n    );\n\n    display.add(\n        b"link".to_string(),\n        b"https://example.com/hero/{id}".to_string()\n    );\n\n    display.add(\n        b"image_url".to_string(),\n        b"https://example.com/hero/{class}.jpg".to_string()\n    );\n\n    // Update the display with the new data.\n    // Must be called to apply changes.\n    display.update_version();\n\n    transfer::public_transfer(publisher, ctx.sender());\n    transfer::public_transfer(display, ctx.sender());\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"creator-privilege",children:"Creator Privilege"}),"\n",(0,s.jsxs)(t.p,{children:["While the objects can be owned by accounts and may be a subject to\n",(0,s.jsx)(t.a,{href:"./../object/ownership#account-owner-or-single-owner",children:"True Ownership"}),", the Display can be owned by\nthe creator of the object. This way, the creator can update the display metadata and apply the\nchanges globally without the need to update every object. The creator can also transfer Display to\nanother account or even build an application around the object with custom functionality to manage\nthe metadata."]}),"\n",(0,s.jsx)(t.h2,{id:"standard-fields",children:"Standard Fields"}),"\n",(0,s.jsx)(t.p,{children:"The fields that are supported most widely are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"name"})," - A name for the object. The name is displayed when users view the object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"description"})," - A description for the object. The description is displayed when users view the\nobject."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"link"})," - A link to the object to use in an application."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"image_url"})," - A URL or a blob with the image for the object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"thumbnail_url"})," - A URL to a smaller image to use in wallets, explorers, and other products as a\npreview."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"project_url"})," - A link to a website associated with the object or creator."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"creator"})," - A string that indicates the object creator."]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Please, refer to the ",(0,s.jsx)(t.a,{href:"https://docs.sui.io/standards/display",children:"Sui Documentation"})," for the most\nup-to-date list of supported fields."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"While there's a standard set of fields, the Display object does not enforce them. The developer can\ndefine any fields they need, and the client can use them as they see fit. Some applications may\nrequire additional fields, and omit other, and the Display is flexible enough to support them."}),"\n",(0,s.jsx)(t.h2,{id:"working-with-display",children:"Working with Display"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Display"})," object is defined in the ",(0,s.jsx)(t.code,{children:"sui::display"})," module. It is a generic struct that takes a\nphantom type as a parameter. The phantom type is used to associate the ",(0,s.jsx)(t.code,{children:"Display"})," object with the\ntype it describes. The ",(0,s.jsx)(t.code,{children:"fields"})," of the ",(0,s.jsx)(t.code,{children:"Display"})," object are a ",(0,s.jsx)(t.code,{children:"VecMap"})," of key-value pairs, where the\nkey is the field name and the value is the field value. The ",(0,s.jsx)(t.code,{children:"version"})," field is used to version the\ndisplay metadata, and is updated on the ",(0,s.jsx)(t.code,{children:"update_display"})," call."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",children:"module sui::display;\n\npublic struct Display<phantom T: key> has key, store {\n    id: UID,\n    /// Contains fields for display. Currently supported\n    /// fields are: name, link, image and description.\n    fields: VecMap<String, String>,\n    /// Version that can only be updated manually by the Publisher.\n    version: u16\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"./publisher",children:"Publisher"})," object is required to a new Display, since it serves as the proof of\nownership of type."]}),"\n",(0,s.jsx)(t.h2,{id:"template-syntax",children:"Template Syntax"}),"\n",(0,s.jsxs)(t.p,{children:["Currently, Display supports simple string interpolation and can use struct fields (and paths) in its\ntemplates. The syntax is trivial - ",(0,s.jsx)(t.code,{children:"{path}"})," is replaced with the value of the field at the path. The\npath is a dot-separated list of field names, starting from the root object in case of nested fields."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/display.move anchor=nested",children:"/// Some common metadata for objects.\npublic struct Metadata has store {\n    name: String,\n    description: String,\n    published_at: u64\n}\n\n/// The type with nested Metadata field.\npublic struct LittlePony has key, store {\n    id: UID,\n    image_url: String,\n    metadata: Metadata\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The Display for the type ",(0,s.jsx)(t.code,{children:"LittlePony"})," above could be defined as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "Just a pony",\n  "image_url": "{image_url}",\n  "description": "{metadata.description}"\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"multiple-display-objects",children:"Multiple Display Objects"}),"\n",(0,s.jsxs)(t.p,{children:["There's no restriction to how many ",(0,s.jsx)(t.code,{children:"Display<T>"})," objects can be created for a specific ",(0,s.jsx)(t.code,{children:"T"}),". However,\nthe most recently updated ",(0,s.jsx)(t.code,{children:"Display<T>"})," will be used by the full node."]}),"\n",(0,s.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://docs.sui.io/standards/display",children:"Sui Object Display"})," is Sui Documentation"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./publisher",children:"Publisher"})," - the representation of the creator"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},5521:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6672);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);