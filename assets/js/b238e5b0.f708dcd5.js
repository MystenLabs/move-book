"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9178],{5521:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6672);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},9030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"unit-testing","title":"Unit Tests | Reference","description":"","source":"@site/../reference/unit-testing.md","sourceDirName":".","slug":"/unit-testing","permalink":"/reference/unit-testing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Unit Tests | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"16. Packages","permalink":"/reference/packages"},"next":{"title":"18. Coding Conventions","permalink":"/reference/coding-conventions"}}');var s=t(3420),i=t(5521);const r={title:"Unit Tests | Reference",description:""},a="Unit Tests",l={},c=[{value:"Test Annotations",id:"test-annotations",level:2},{value:"Expected Failures",id:"expected-failures",level:2},{value:"1. <code>#[expected_failure(abort_code = &lt;constant&gt;)]</code>",id:"1-expected_failureabort_code--constant",level:3},{value:"2. <code>#[expected_failure(arithmetic_error, location = &lt;location&gt;)]</code>",id:"2-expected_failurearithmetic_error-location--location",level:3},{value:"3. <code>#[expected_failure(out_of_gas, location = &lt;location&gt;)]</code>",id:"3-expected_failureout_of_gas-location--location",level:3},{value:"4. <code>#[expected_failure(vector_error, minor_status = &lt;u64_opt&gt;, location = &lt;location&gt;)]</code>",id:"4-expected_failurevector_error-minor_status--u64_opt-location--location",level:3},{value:"5. <code>#[expected_failure]</code>",id:"5-expected_failure",level:3},{value:"Test Only Annotations",id:"test-only-annotations",level:2},{value:"Running Unit Tests",id:"running-unit-tests",level:2},{value:"Example",id:"example",level:2},{value:"Running Tests",id:"running-tests",level:3},{value:"Using Test Flags",id:"using-test-flags",level:3},{value:"Passing specific tests to run",id:"passing-specific-tests-to-run",level:4},{value:"<code>-i &lt;bound&gt;</code> or <code>--gas_used &lt;bound&gt;</code>",id:"-i-bound-or---gas_used-bound",level:4},{value:"<code>-s</code> or <code>--statistics</code>",id:"-s-or---statistics",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unit-tests",children:"Unit Tests"})}),"\n",(0,s.jsx)(n.p,{children:"Unit testing for Move uses three annotations in the Move source language:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#[test]"})," marks a function as a test;"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#[expected_failure]"})," marks that a test is expected to fail;"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#[test_only]"})," marks a module or module member (",(0,s.jsx)(n.a,{href:"./uses",children:(0,s.jsx)(n.code,{children:"use"})}),", ",(0,s.jsx)(n.a,{href:"./functions",children:"function"}),",\n",(0,s.jsx)(n.a,{href:"./structs",children:"struct"}),", or ",(0,s.jsx)(n.a,{href:"./constants",children:"constant"}),") as code to be included for testing only."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These annotations can be placed on any appropriate form with any visibility. Whenever a module or\nmodule member is annotated as ",(0,s.jsx)(n.code,{children:"#[test_only]"})," or ",(0,s.jsx)(n.code,{children:"#[test]"}),", it will not be included in the compiled\nbytecode unless it is compiled for testing."]}),"\n",(0,s.jsx)(n.h2,{id:"test-annotations",children:"Test Annotations"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"#[test]"})," annotation can only be placed on a function with no parameters. This annotation marks\nthe function as a test to be run by the unit testing harness."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"#[test] // OK\nfun this_is_a_test() { ... }\n\n#[test] // Will fail to compile since the test takes an argument\nfun this_is_not_correct(arg: u64) { ... }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A test can also be annotated as an ",(0,s.jsx)(n.code,{children:"#[expected_failure]"}),". This annotation marks that the test is\nexpected to raise an error. There are a number of options that can be used with the\n",(0,s.jsx)(n.code,{children:"#[expected_failure]"})," annotation to ensure only a failure with the specified condition is marked as\npassing, these options are detailed in ",(0,s.jsx)(n.a,{href:"#expected-failures",children:"Expected Failures"}),". Only functions that\nhave the ",(0,s.jsx)(n.code,{children:"#[test]"})," annotation can also be annotated as an #",(0,s.jsx)(n.code,{children:"[expected_failure]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Some simple examples of using the ",(0,s.jsx)(n.code,{children:"#[expected_failure]"})," annotation are shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"#[test]\n#[expected_failure]\npublic fun this_test_will_abort_and_pass() { abort 1 }\n\n#[test]\n#[expected_failure]\npublic fun test_will_error_and_pass() { 1/0; }\n\n#[test] // Will pass since test fails with the expected abort code constant.\n#[expected_failure(abort_code = ENotFound)] // ENotFound is a constant defined in the module\npublic fun test_will_error_and_pass_abort_code() { abort ENotFound }\n\n#[test] // Will fail since test fails with a different error than expected.\n#[expected_failure(abort_code = my_module::ENotFound)]\npublic fun test_will_error_and_fail() { 1/0; }\n\n#[test, expected_failure] // Can have multiple in one attribute. This test will pass.\npublic fun this_other_test_will_abort_and_pass() { abort 1 }\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": ",(0,s.jsx)(n.code,{children:"#[test]"})," and ",(0,s.jsx)(n.code,{children:"#[test_only]"})," functions can also call\n",(0,s.jsx)(n.a,{href:"./functions#entry-modifier",children:(0,s.jsx)(n.code,{children:"entry"})})," functions, regardless of their visibility."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"expected-failures",children:"Expected Failures"}),"\n",(0,s.jsxs)(n.p,{children:["There are a number of different ways that you can use the ",(0,s.jsx)(n.code,{children:"#[expected_failure]"})," annotation to\nspecify different types of error conditions. These are:"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-expected_failureabort_code--constant",children:["1. ",(0,s.jsx)(n.code,{children:"#[expected_failure(abort_code = <constant>)]"})]}),"\n",(0,s.jsx)(n.p,{children:"This will pass if the test aborts with the specified constant value in the module that defines the\nconstant and fail otherwise. This is the recommended way of testing for expected test failures."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": You can reference constants outside of the current module or package in\n",(0,s.jsx)(n.code,{children:"expected_failure"})," annotations."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module pkg_addr::other_module {\n    const ENotFound: u64 = 1;\n    public fun will_abort() {\n        abort ENotFound\n    }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    const ENotFound: u64 = 1;\n\n    #[test]\n    #[expected_failure(abort_code = ENotFound)]\n    fun test_will_abort_and_pass() { abort ENotFound }\n\n    #[test]\n    #[expected_failure(abort_code = other_module::ENotFound)]\n    fun test_will_abort_and_pass() { other_module::will_abort() }\n\n    // FAIL: Will not pass since we are expecting the constant from the wrong module.\n    #[test]\n    #[expected_failure(abort_code = ENotFound)]\n    fun test_will_abort_and_pass() { other_module::will_abort() }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-expected_failurearithmetic_error-location--location",children:["2. ",(0,s.jsx)(n.code,{children:"#[expected_failure(arithmetic_error, location = <location>)]"})]}),"\n",(0,s.jsxs)(n.p,{children:["This specifies that the test is expected to fail with an arithmetic error (e.g., integer overflow,\ndivision by zero, etc) at the specified location. The ",(0,s.jsx)(n.code,{children:"<location>"})," must be a valid path to a module\nlocation, e.g., ",(0,s.jsx)(n.code,{children:"Self"}),", or ",(0,s.jsx)(n.code,{children:"my_package::my_module"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module pkg_addr::other_module {\n    public fun will_arith_error() { 1/0; }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    #[test]\n    #[expected_failure(arithmetic_error, location = Self)]\n    fun test_will_arith_error_and_pass1() { 1/0; }\n\n    #[test]\n    #[expected_failure(arithmetic_error, location = pkg_addr::other_module)]\n    fun test_will_arith_error_and_pass2() { other_module::will_arith_error() }\n\n    // FAIL: Will fail since the location we expect it the fail at is different from where the test actually failed.\n    #[test]\n    #[expected_failure(arithmetic_error, location = Self)]\n    fun test_will_arith_error_and_fail() { other_module::will_arith_error() }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-expected_failureout_of_gas-location--location",children:["3. ",(0,s.jsx)(n.code,{children:"#[expected_failure(out_of_gas, location = <location>)]"})]}),"\n",(0,s.jsxs)(n.p,{children:["This specifies that the test is expected to fail with an out of gas error at the specified location.\nThe ",(0,s.jsx)(n.code,{children:"<location>"})," must be a valid path to a module location, e.g., ",(0,s.jsx)(n.code,{children:"Self"}),", or\n",(0,s.jsx)(n.code,{children:"my_package::my_module"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module pkg_addr::other_module {\n    public fun will_oog() { loop {} }\n}\n\nmodule pkg_addr::my_module {\n    use pkg_addr::other_module;\n    #[test]\n    #[expected_failure(out_of_gas, location = Self)]\n    fun test_will_oog_and_pass1() { loop {} }\n\n    #[test]\n    #[expected_failure(arithmetic_error, location = pkg_addr::other_module)]\n    fun test_will_oog_and_pass2() { other_module::will_oog() }\n\n    // FAIL: Will fail since the location we expect it the fail at is different from where\n    // the test actually failed.\n    #[test]\n    #[expected_failure(out_of_gas, location = Self)]\n    fun test_will_oog_and_fail() { other_module::will_oog() }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"4-expected_failurevector_error-minor_status--u64_opt-location--location",children:["4. ",(0,s.jsx)(n.code,{children:"#[expected_failure(vector_error, minor_status = <u64_opt>, location = <location>)]"})]}),"\n",(0,s.jsxs)(n.p,{children:["This specifies that the test is expected to fail with a vector error at the specified location with\nthe given ",(0,s.jsx)(n.code,{children:"minor_status"})," (if provided). The ",(0,s.jsx)(n.code,{children:"<location>"})," must be a valid path to a module module\nlocation, e.g., ",(0,s.jsx)(n.code,{children:"Self"}),", or ",(0,s.jsx)(n.code,{children:"my_package::my_module"}),". The ",(0,s.jsx)(n.code,{children:"<u64_opt>"})," is an optional parameter that\nspecifies the minor status of the vector error. If it is not specified, the test will pass if the\ntest fails with any minor status. If it is specified, the test will only pass if the test fails with\na vector error with the specified minor status."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"module pkg_addr::other_module {\n    public fun vector_borrow_empty() {\n        &vector<u64>[][1];\n    }\n}\n\nmodule pkg_addr::my_module {\n    #[test]\n    #[expected_failure(vector_error, location = Self)]\n    fun vector_abort_same_module() {\n        vector::borrow(&vector<u64>[], 1);\n    }\n\n    #[test]\n    #[expected_failure(vector_error, location = pkg_addr::other_module)]\n    fun vector_abort_same_module() {\n        other_module::vector_borrow_empty();\n    }\n\n    // Can specify minor statues (i.e., vector-specific error codes) to expect.\n    #[test]\n    #[expected_failure(vector_error, minor_status = 1, location = Self)]\n    fun native_abort_good_right_code() {\n        vector::borrow(&vector<u64>[], 1);\n    }\n\n    // FAIL: correct error, but wrong location.\n    #[test]\n    #[expected_failure(vector_error, location = pkg_addr::other_module)]\n    fun vector_abort_same_module() {\n        other_module::vector_borrow_empty();\n    }\n\n    // FAIL: correct error and location but the minor status differs so this test will fail.\n    #[test]\n    #[expected_failure(vector_error, minor_status = 0, location = Self)]\n    fun vector_abort_wrong_minor_code() {\n        vector::borrow(&vector<u64>[], 1);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"5-expected_failure",children:["5. ",(0,s.jsx)(n.code,{children:"#[expected_failure]"})]}),"\n",(0,s.jsxs)(n.p,{children:["This will pass if the test aborts with ",(0,s.jsx)(n.em,{children:"any"})," error code. You should be ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"incredibly careful"})}),"\nusing this to annotate expected tests failures, and always prefer one of the ways described above\ninstead. Examples of these types of annotations are:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"#[test]\n#[expected_failure]\nfun test_will_abort_and_pass1() { abort 1 }\n\n#[test]\n#[expected_failure]\nfun test_will_arith_error_and_pass2() { 1/0; }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"test-only-annotations",children:"Test Only Annotations"}),"\n",(0,s.jsxs)(n.p,{children:["A module and any of its members can be declared as test only. If an item is annotated as\n",(0,s.jsx)(n.code,{children:"#[test_only]"})," the item will only be included in the compiled Move bytecode when compiled in test\nmode. Additionally, when compiled outside of test mode, any non-test ",(0,s.jsx)(n.code,{children:"use"}),"s of a ",(0,s.jsx)(n.code,{children:"#[test_only]"}),"\nmodule will raise an error during compilation."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": functions that are annotated with ",(0,s.jsx)(n.code,{children:"#[test_only]"})," will only be available to be called\nfrom test code, but they themselves are not tests and will not be run as tests by the unit testing\nframework."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"#[test_only] // test only attributes can be attached to modules\nmodule abc { ... }\n\n#[test_only] // test only attributes can be attached to constants\nconst MY_ADDR: address = @0x1;\n\n#[test_only] // .. to uses\nuse pkg_addr::some_other_module;\n\n#[test_only] // .. to structs\npublic struct SomeStruct { ... }\n\n#[test_only] // .. and functions. Can only be called from test code, but this is _not_ a test!\nfun test_only_function(...) { ... }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"running-unit-tests",children:"Running Unit Tests"}),"\n",(0,s.jsxs)(n.p,{children:["Unit tests for a Move package can be run with the ",(0,s.jsxs)(n.a,{href:"./packages",children:[(0,s.jsx)(n.code,{children:"sui move test"})," command"]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When running tests, every test will either ",(0,s.jsx)(n.code,{children:"PASS"}),", ",(0,s.jsx)(n.code,{children:"FAIL"}),", or ",(0,s.jsx)(n.code,{children:"TIMEOUT"}),". If a test case fails, the\nlocation of the failure along with the function name that caused the failure will be reported if\npossible. You can see an example of this below."]}),"\n",(0,s.jsx)(n.p,{children:"A test will be marked as timing out if it exceeds the maximum number of instructions that can be\nexecuted for any single test. This bound can be changed using the options below. Additionally, while\nthe result of a test is always deterministic, tests are run in parallel by default, so the ordering\nof test results in a test run is non-deterministic unless running with only one thread, which can be\nconfigured via an option."}),"\n",(0,s.jsxs)(n.p,{children:["These aforementioned options are two among many that can fine-tune testing and help debug failing\ntests. To see all available options, and a description of what each one does, pass the ",(0,s.jsx)(n.code,{children:"--help"})," flag\nto the ",(0,s.jsx)(n.code,{children:"sui move test"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ sui move test --help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"A simple module using some of the unit testing features is shown in the following example:"}),"\n",(0,s.jsx)(n.p,{children:"First create an empty package and change directory into it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ sui move new test_example; cd test_example\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next add the following module under the ",(0,s.jsx)(n.code,{children:"sources"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"// filename: sources/my_module.move\nmodule test_example::my_module;\n\npublic struct Wrapper(u64)\n\nconst ECoinIsZero: u64 = 0;\n\npublic fun make_sure_non_zero_coin(coin: Wrapper): Wrapper {\n    assert!(coin.0 > 0, ECoinIsZero);\n    coin\n}\n\n#[test]\nfun make_sure_non_zero_coin_passes() {\n    let coin = Wrapper(1);\n    let Wrapper(_) = make_sure_non_zero_coin(coin);\n}\n\n#[test]\n// Or #[expected_failure] if we don't care about the abort code\n#[expected_failure(abort_code = ECoinIsZero)]\nfun make_sure_zero_coin_fails() {\n    let coin = Wrapper(0);\n    let Wrapper(_) = make_sure_non_zero_coin(coin);\n}\n\n#[test_only] // test only helper function\nfun make_coin_zero(coin: &mut Wrapper) {\n    coin.0 = 0;\n}\n\n#[test]\n#[expected_failure(abort_code = ECoinIsZero)]\nfun make_sure_zero_coin_fails2() {\n    let mut coin = Wrapper(10);\n    coin.make_coin_zero();\n    let Wrapper(_) = make_sure_non_zero_coin(coin);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,s.jsxs)(n.p,{children:["You can then run these tests with the ",(0,s.jsx)(n.code,{children:"move test"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ sui move test\nINCLUDING DEPENDENCY Bridge\nINCLUDING DEPENDENCY DeepBook\nINCLUDING DEPENDENCY SuiSystem\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test_example\nRunning Move unit tests\n[ PASS    ] 0x0::my_module::make_sure_non_zero_coin_passes\n[ PASS    ] 0x0::my_module::make_sure_zero_coin_fails\n[ PASS    ] 0x0::my_module::make_sure_zero_coin_fails2\nTest result: OK. Total tests: 3; passed: 3; failed: 0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-test-flags",children:"Using Test Flags"}),"\n",(0,s.jsx)(n.h4,{id:"passing-specific-tests-to-run",children:"Passing specific tests to run"}),"\n",(0,s.jsxs)(n.p,{children:["You can run a specific test, or a set of tests with ",(0,s.jsx)(n.code,{children:"sui move test <str>"}),". This will only run tests\nwhose fully qualified name contains ",(0,s.jsx)(n.code,{children:"<str>"}),". For example if we wanted to only run tests with\n",(0,s.jsx)(n.code,{children:'"non_zero"'})," in their name:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ sui move test non_zero\nINCLUDING DEPENDENCY Bridge\nINCLUDING DEPENDENCY DeepBook\nINCLUDING DEPENDENCY SuiSystem\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test_example\nRunning Move unit tests\n[ PASS    ] 0x0::my_module::make_sure_non_zero_coin_passes\nTest result: OK. Total tests: 1; passed: 1; failed: 0\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"-i-bound-or---gas_used-bound",children:[(0,s.jsx)(n.code,{children:"-i <bound>"})," or ",(0,s.jsx)(n.code,{children:"--gas_used <bound>"})]}),"\n",(0,s.jsxs)(n.p,{children:["This bounds the amount of gas that can be consumed for any one test to ",(0,s.jsx)(n.code,{children:"<bound>"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ sui move test -i 0\nINCLUDING DEPENDENCY Bridge\nINCLUDING DEPENDENCY DeepBook\nINCLUDING DEPENDENCY SuiSystem\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test_example\nRunning Move unit tests\n[ TIMEOUT ] 0x0::my_module::make_sure_non_zero_coin_passes\n[ FAIL    ] 0x0::my_module::make_sure_zero_coin_fails\n[ FAIL    ] 0x0::my_module::make_sure_zero_coin_fails2\n\nTest failures:\n\nFailures in 0x0::my_module:\n\n\u250c\u2500\u2500 make_sure_non_zero_coin_passes \u2500\u2500\u2500\u2500\u2500\u2500\n\u2502 Test timed out\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\u250c\u2500\u2500 make_sure_zero_coin_fails \u2500\u2500\u2500\u2500\u2500\u2500\n\u2502 error[E11001]: test failure\n\u2502    \u250c\u2500 ./sources/my_module.move:22:27\n\u2502    \u2502\n\u2502 21 \u2502     fun make_sure_zero_coin_fails() {\n\u2502    \u2502         ------------------------- In this function in 0x0::my_module\n\u2502 22 \u2502         let coin = MyCoin(0);\n\u2502    \u2502                           ^ Test did not error as expected. Expected test to abort with code 0 <SNIP>\n\u2502\n\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\u250c\u2500\u2500 make_sure_zero_coin_fails2 \u2500\u2500\u2500\u2500\u2500\u2500\n\u2502 error[E11001]: test failure\n\u2502    \u250c\u2500 ./sources/my_module.move:34:31\n\u2502    \u2502\n\u2502 33 \u2502     fun make_sure_zero_coin_fails2() {\n\u2502    \u2502         -------------------------- In this function in 0x0::my_module\n\u2502 34 \u2502         let mut coin = MyCoin(10);\n\u2502    \u2502                               ^^ Test did not error as expected. Expected test to abort with code 0 <SNIP>\n\u2502\n\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTest result: FAILED. Total tests: 3; passed: 0; failed: 3\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"-s-or---statistics",children:[(0,s.jsx)(n.code,{children:"-s"})," or ",(0,s.jsx)(n.code,{children:"--statistics"})]}),"\n",(0,s.jsxs)(n.p,{children:["With these flags you can gather statistics about the tests run and report the runtime and gas used\nfor each test. You can additionally add ",(0,s.jsx)(n.code,{children:"csv"})," (",(0,s.jsx)(n.code,{children:"sui move test -s csv"}),") to get the gas usage in a csv\noutput format. For example, if we wanted to see the statistics for the tests in the example above:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ sui move test -s\nINCLUDING DEPENDENCY Bridge\nINCLUDING DEPENDENCY DeepBook\nINCLUDING DEPENDENCY SuiSystem\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test_example\nRunning Move unit tests\n[ PASS    ] 0x0::my_module::make_sure_non_zero_coin_passes\n[ PASS    ] 0x0::my_module::make_sure_zero_coin_fails\n[ PASS    ] 0x0::my_module::make_sure_zero_coin_fails2\n\nTest Statistics:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Test Name                    \u2502    Time    \u2502         Gas Used          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0x0::my_module::make_sure_non_zero_coin_passes \u2502   0.001    \u2502             1             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0x0::my_module::make_sure_zero_coin_fails      \u2502   0.001    \u2502             1             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0x0::my_module::make_sure_zero_coin_fails2     \u2502   0.001    \u2502             1             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTest result: OK. Total tests: 3; passed: 3; failed: 0\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);