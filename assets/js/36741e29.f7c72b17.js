"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2356],{5227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"appendix/glossary","title":"Appendix A: Glossary","description":"- Fast Path - term used to describe a transaction that does not involve shared objects, and can be","source":"@site/../book/appendix/glossary.md","sourceDirName":"appendix","slug":"/appendix/glossary","permalink":"/appendix/glossary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"Code Quality Checklist","permalink":"/guides/code-quality-checklist"},"next":{"title":"B. Reserved Addresses","permalink":"/appendix/reserved-addresses"}}');var i=n(3420),o=n(5521);const a={},r="Appendix A: Glossary",l={},d=[{value:"Abilities",id:"abilities",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"appendix-a-glossary",children:"Appendix A: Glossary"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Fast Path - term used to describe a transaction that does not involve shared objects, and can be\nexecuted without the need for consensus."}),"\n",(0,i.jsx)(t.li,{children:"Parallel Execution - term used to describe the ability of the Sui runtime to execute transactions\nin parallel, including the ones that involve shared objects."}),"\n",(0,i.jsxs)(t.li,{children:['Internal Type - type that is defined within the module. Fields of this type can not be accessed\nfrom outside the module, and, in case of "key"-only abilities, can not be used in ',(0,i.jsx)(t.code,{children:"public_*"}),"\ntransfer functions."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"abilities",children:"Abilities"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["key - ability that allows the struct to be used as a key in the storage. On Sui, the key ability\nmarks an object and requires the first field to be a ",(0,i.jsx)(t.code,{children:"id: UID"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["store - ability that allows the struct to be stored inside other objects. This ability relaxes\nrestrictions applied to internal structs, allowing ",(0,i.jsx)(t.code,{children:"public_*"})," transfer functions to accept them as\narguments. It also enables the object to be stored as a dynamic field."]}),"\n",(0,i.jsxs)(t.li,{children:["copy - ability that allows the struct to be copied. On Sui, the ",(0,i.jsx)(t.code,{children:"copy"})," ability conflicts with the\n",(0,i.jsx)(t.code,{children:"key"})," ability, and can not be used together with it."]}),"\n",(0,i.jsxs)(t.li,{children:["drop - ability that allows the struct to be ignored or discarded. On Sui, the ",(0,i.jsx)(t.code,{children:"drop"})," ability\ncannot be used together with the ",(0,i.jsx)(t.code,{children:"key"})," ability, as objects are not allowed to be ignored."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5521:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6672);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);