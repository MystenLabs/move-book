"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7407],{5521:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var i=o(6672);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}},6868:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"control-flow/loops","title":"Loops | Reference","description":"","source":"@site/../reference/control-flow/loops.md","sourceDirName":"control-flow","slug":"/control-flow/loops","permalink":"/reference/control-flow/loops","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Loops | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"6.1 Conditional Expressions","permalink":"/reference/control-flow/conditionals"},"next":{"title":"6.3 Labeled Control Flow","permalink":"/reference/control-flow/labeled-control-flow"}}');var s=o(3420),l=o(5521);const r={title:"Loops | Reference",description:""},c="Loop Constructs in Move",t={},d=[{value:"<code>while</code> Loops",id:"while-loops",level:2},{value:"Using <code>break</code> Inside of <code>while</code> Loops",id:"using-break-inside-of-while-loops",level:3},{value:"Using <code>continue</code> Inside of <code>while</code> Loops",id:"using-continue-inside-of-while-loops",level:3},{value:"<code>loop</code> Expressions",id:"loop-expressions",level:2},{value:"Using <code>break</code> with Values in <code>loop</code>",id:"using-break-with-values-in-loop",level:3},{value:"Using <code>continue</code> Inside of <code>loop</code> Expressions",id:"using-continue-inside-of-loop-expressions",level:3},{value:"The Type of <code>while</code> and <code>loop</code>",id:"the-type-of-while-and-loop",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"loop-constructs-in-move",children:"Loop Constructs in Move"})}),"\n",(0,s.jsxs)(n.p,{children:["Many programs require iteration over values, and Move provides ",(0,s.jsx)(n.code,{children:"while"})," and ",(0,s.jsx)(n.code,{children:"loop"})," forms to allow you\nto write code in these situations. In addition, you can also modify control flow of these loops\nduring execution by using ",(0,s.jsx)(n.code,{children:"break"})," (to exit the loop) and ",(0,s.jsx)(n.code,{children:"continue"})," (to skip the remainder of this\niteration and return to the top of the control flow structure)."]}),"\n",(0,s.jsxs)(n.h2,{id:"while-loops",children:[(0,s.jsx)(n.code,{children:"while"})," Loops"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"while"})," construct repeats the body (an expression of type unit) until the condition (an\nexpression of type ",(0,s.jsx)(n.code,{children:"bool"}),") evaluates to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of simple ",(0,s.jsx)(n.code,{children:"while"})," loop that computes the sum of the numbers from ",(0,s.jsx)(n.code,{children:"1"})," to ",(0,s.jsx)(n.code,{children:"n"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun sum(n: u64): u64 {\n    let mut sum = 0;\n    let mut i = 1;\n    while (i <= n) {\n        sum = sum + i;\n        i = i + 1\n    };\n\n    sum\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Infinite ",(0,s.jsx)(n.code,{children:"while"})," loops are also allowed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun foo() {\n    while (true) { }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"using-break-inside-of-while-loops",children:["Using ",(0,s.jsx)(n.code,{children:"break"})," Inside of ",(0,s.jsx)(n.code,{children:"while"})," Loops"]}),"\n",(0,s.jsxs)(n.p,{children:["In Move, ",(0,s.jsx)(n.code,{children:"while"})," loops can use ",(0,s.jsx)(n.code,{children:"break"})," to exit early. For example, suppose we were looking for the\nposition of a value in a vector, and would like to ",(0,s.jsx)(n.code,{children:"break"})," if we find it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun find_position(values: &vector<u64>, target_value: u64): Option<u64> {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut found = false;\n\n    while (i < size) {\n        if (vector::borrow(values, i) == &target_value) {\n            found = true;\n            break\n        };\n        i = i + 1\n    };\n\n    if (found) {\n        option::some(i)\n    } else {\n        option::none<u64>()\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, if the borrowed vector value is equal to our target value, we set the ",(0,s.jsx)(n.code,{children:"found"})," flag to ",(0,s.jsx)(n.code,{children:"true"}),"\nand then call ",(0,s.jsx)(n.code,{children:"break"}),", which will cause the program to exit the loop."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, note that ",(0,s.jsx)(n.code,{children:"break"})," for ",(0,s.jsx)(n.code,{children:"while"})," loops cannot take a value: ",(0,s.jsx)(n.code,{children:"while"})," loops always return the\nunit type ",(0,s.jsx)(n.code,{children:"()"})," and thus ",(0,s.jsx)(n.code,{children:"break"})," does, too."]}),"\n",(0,s.jsxs)(n.h3,{id:"using-continue-inside-of-while-loops",children:["Using ",(0,s.jsx)(n.code,{children:"continue"})," Inside of ",(0,s.jsx)(n.code,{children:"while"})," Loops"]}),"\n",(0,s.jsxs)(n.p,{children:["Similar to ",(0,s.jsx)(n.code,{children:"break"}),", Move's ",(0,s.jsx)(n.code,{children:"while"})," loops can invoke ",(0,s.jsx)(n.code,{children:"continue"})," to skip over part of the loop body.\nThis allows us to skip part of a computation if a condition is not met, such as in the following\nexample:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun sum_even(values: &vector<u64>): u64 {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut even_sum = 0;\n\n    while (i < size) {\n        let number = *vector::borrow(values, i);\n        i = i + 1;\n        if (number % 2 == 1) continue;\n        even_sum = even_sum + number;\n    };\n    even_sum\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This code will iterate over the provided vector. For each entry, if that entry is an even number, it\nwill add it to the ",(0,s.jsx)(n.code,{children:"even_sum"}),". If it is not, however, it will call ",(0,s.jsx)(n.code,{children:"continue"}),", skipping the sum\noperation and returning to the ",(0,s.jsx)(n.code,{children:"while"})," loop conditional check."]}),"\n",(0,s.jsxs)(n.h2,{id:"loop-expressions",children:[(0,s.jsx)(n.code,{children:"loop"})," Expressions"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"loop"})," expression repeats the loop body (an expression with type ",(0,s.jsx)(n.code,{children:"()"}),") until it hits a ",(0,s.jsx)(n.code,{children:"break"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun sum(n: u64): u64 {\n    let mut sum = 0;\n    let mut i = 1;\n\n    loop {\n       i = i + 1;\n       if (i >= n) break;\n       sum = sum + i;\n    };\n\n    sum\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Without a ",(0,s.jsx)(n.code,{children:"break"}),", the loop will continue forever. In the example below, the program will run\nforever because the ",(0,s.jsx)(n.code,{children:"loop"})," does not have a ",(0,s.jsx)(n.code,{children:"break"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun foo() {\n    let mut i = 0;\n    loop { i = i + 1 }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example that uses ",(0,s.jsx)(n.code,{children:"loop"})," to write the ",(0,s.jsx)(n.code,{children:"sum"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun sum(n: u64): u64 {\n    let sum = 0;\n    let i = 0;\n    loop {\n        i = i + 1;\n        if (i > n) break;\n        sum = sum + i\n    };\n\n    sum\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"using-break-with-values-in-loop",children:["Using ",(0,s.jsx)(n.code,{children:"break"})," with Values in ",(0,s.jsx)(n.code,{children:"loop"})]}),"\n",(0,s.jsxs)(n.p,{children:["Unlike ",(0,s.jsx)(n.code,{children:"while"})," loops, which always return ",(0,s.jsx)(n.code,{children:"()"}),", a ",(0,s.jsx)(n.code,{children:"loop"})," may return a value using ",(0,s.jsx)(n.code,{children:"break"}),". In doing\nso, the overall ",(0,s.jsx)(n.code,{children:"loop"})," expression evaluates to a value of that type. For example, we can rewrite\n",(0,s.jsx)(n.code,{children:"find_position"})," from above using ",(0,s.jsx)(n.code,{children:"loop"})," and ",(0,s.jsx)(n.code,{children:"break"}),", immediately returning the index if we find it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun find_position(values: &vector<u64>, target_value: u64): Option<u64> {\n    let size = vector::length(values);\n    let mut i = 0;\n\n    loop {\n        if (vector::borrow(values, i) == &target_value) {\n            break option::some(i)\n        } else if (i >= size) {\n            break option::none()\n        };\n        i = i + 1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This loop will break with an option result, and, as the last expression in the function body, will\nproduce that value as the final function result."}),"\n",(0,s.jsxs)(n.h3,{id:"using-continue-inside-of-loop-expressions",children:["Using ",(0,s.jsx)(n.code,{children:"continue"})," Inside of ",(0,s.jsx)(n.code,{children:"loop"})," Expressions"]}),"\n",(0,s.jsxs)(n.p,{children:["As you might expect, ",(0,s.jsx)(n.code,{children:"continue"})," can also be used inside a ",(0,s.jsx)(n.code,{children:"loop"}),". Here is the previous ",(0,s.jsx)(n.code,{children:"sum_even"}),"\nfunction rewritten using ",(0,s.jsx)(n.code,{children:"loop"})," with ",(0,s.jsx)(n.code,{children:"break "}),"and",(0,s.jsx)(n.code,{children:" continue"})," instead of ",(0,s.jsx)(n.code,{children:"while"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"fun sum_even(values: &vector<u64>): u64 {\n    let size = vector::length(values);\n    let mut i = 0;\n    let mut even_sum = 0;\n\n    loop {\n        if (i >= size) break;\n        let number = *vector::borrow(values, i);\n        i = i + 1;\n        if (number % 2 == 1) continue;\n        even_sum = even_sum + number;\n    };\n    even_sum\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"the-type-of-while-and-loop",children:["The Type of ",(0,s.jsx)(n.code,{children:"while"})," and ",(0,s.jsx)(n.code,{children:"loop"})]}),"\n",(0,s.jsxs)(n.p,{children:["In Move, loops are typed expressions. A ",(0,s.jsx)(n.code,{children:"while"})," expression always has type ",(0,s.jsx)(n.code,{children:"()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"let () = while (i < 10) { i = i + 1 };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.code,{children:"loop"})," contains a ",(0,s.jsx)(n.code,{children:"break"}),", the expression has the type of the break. A break with no value has\nthe unit type ",(0,s.jsx)(n.code,{children:"()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"(loop { if (i < 10) i = i + 1 else break }: ());\nlet () = loop { if (i < 10) i = i + 1 else break };\n\nlet x: u64 = loop { if (i < 10) i = i + 1 else break 5 };\nlet x: u64 = loop { if (i < 10) { i = i + 1; continue} else break 5 };\n"})}),"\n",(0,s.jsx)(n.p,{children:"In addition, if a loop contains multiple breaks, they must all return the same type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"// invalid -- first break returns (), second returns 5\nlet x: u64 = loop { if (i < 10) break else break 5 };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"loop"})," does not have a ",(0,s.jsx)(n.code,{children:"break"}),", ",(0,s.jsx)(n.code,{children:"loop"})," can have any type much like ",(0,s.jsx)(n.code,{children:"return"}),", ",(0,s.jsx)(n.code,{children:"abort"}),", ",(0,s.jsx)(n.code,{children:"break"}),",\nand ",(0,s.jsx)(n.code,{children:"continue"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"(loop (): u64);\n(loop (): address);\n(loop (): &vector<vector<u8>>);\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you need even more-precise control flow, such as breaking out of nested loops, the next chapter\npresents the use of labeled control flow in Move."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);