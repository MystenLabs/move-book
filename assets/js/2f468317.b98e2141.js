"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5058],{5521:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(6672);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},6901:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"move-basics/struct","title":"Custom Types with Struct","description":"Move\'s type system shines when it comes to defining custom types. User defined types can be custom","source":"@site/../book/move-basics/struct.md","sourceDirName":"move-basics","slug":"/move-basics/struct","permalink":"/move-basics/struct","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.5. Expressions","permalink":"/move-basics/expression"},"next":{"title":"5.7. Abilities Introduction","permalink":"/move-basics/abilities-introduction"}}');var i=n(3420),r=n(5521);const a={},c="Custom Types with Struct",o={},d=[{value:"Struct",id:"struct",level:2},{value:"Create and use an instance",id:"create-and-use-an-instance",level:2},{value:"Unpacking a struct",id:"unpacking-a-struct",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"custom-types-with-struct",children:"Custom Types with Struct"})}),"\n",(0,i.jsx)(t.p,{children:"Move's type system shines when it comes to defining custom types. User defined types can be custom\ntailored to the specific needs of the application, not only on the data level, but also in its\nbehavior. In this section we introduce the struct definition and how to use it."}),"\n",(0,i.jsx)(t.h2,{id:"struct",children:"Struct"}),"\n",(0,i.jsxs)(t.p,{children:["To define a custom type, you can use the ",(0,i.jsx)(t.code,{children:"struct"})," keyword followed by the name of the type. After\nthe name, you can define the fields of the struct. Each field is defined with the\n",(0,i.jsx)(t.code,{children:"field_name: field_type"})," syntax. Field definitions must be separated by commas. The fields can be of\nany type, including other structs."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Move does not support recursive structs, meaning a struct cannot contain itself as a field."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/struct.move anchor=def",children:"/// A struct representing an artist.\npublic struct Artist {\n    /// The name of the artist.\n    name: String,\n}\n\n/// A struct representing a music record.\npublic struct Record {\n    /// The title of the record.\n    title: String,\n    /// The artist of the record. Uses the `Artist` type.\n    artist: Artist,\n    /// The year the record was released.\n    year: u16,\n    /// Whether the record is a debut album.\n    is_debut: bool,\n    /// The edition of the record.\n    edition: Option<u16>,\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In the example above, we define a ",(0,i.jsx)(t.code,{children:"Record"})," struct with five fields. The ",(0,i.jsx)(t.code,{children:"title"})," field is of type\n",(0,i.jsx)(t.code,{children:"String"}),", the ",(0,i.jsx)(t.code,{children:"artist"})," field is of type ",(0,i.jsx)(t.code,{children:"Artist"}),", the ",(0,i.jsx)(t.code,{children:"year"})," field is of type ",(0,i.jsx)(t.code,{children:"u16"}),", the ",(0,i.jsx)(t.code,{children:"is_debut"}),"\nfield is of type ",(0,i.jsx)(t.code,{children:"bool"}),", and the ",(0,i.jsx)(t.code,{children:"edition"})," field is of type ",(0,i.jsx)(t.code,{children:"Option<u16>"}),". The ",(0,i.jsx)(t.code,{children:"edition"})," field is of\ntype ",(0,i.jsx)(t.code,{children:"Option<u16>"})," to represent that the edition is optional."]}),"\n",(0,i.jsxs)(t.p,{children:["Structs are private by default, meaning they cannot be imported and used outside of the module they\nare defined in. Their fields are also private and can't be accessed from outside the module. See\n",(0,i.jsx)(t.a,{href:"./visibility",children:"visibility"})," for more information on different visibility modifiers."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Fields of a struct are private and can only be accessed by the module defining the struct. Reading\nand writing the fields of a struct in other modules is only possible if the module defining the\nstruct provides public functions to access the fields."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"create-and-use-an-instance",children:"Create and use an instance"}),"\n",(0,i.jsxs)(t.p,{children:["We described the ",(0,i.jsx)(t.em,{children:"definition"})," of a struct. Now let's see how to initialize a struct and use it. A\nstruct can be initialized using the ",(0,i.jsx)(t.code,{children:"struct_name { field1: value1, field2: value2, ... }"})," syntax.\nThe fields can be initialized in any order, and all of the required fields must be set."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/struct.move anchor=pack",children:'let mut artist = Artist {\n    name: b"The Beatles".to_string()\n};\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In the example above, we create an instance of the ",(0,i.jsx)(t.code,{children:"Artist"})," struct and set the ",(0,i.jsx)(t.code,{children:"name"}),' field to a\nstring "The Beatles".']}),"\n",(0,i.jsxs)(t.p,{children:["To access the fields of a struct, you can use the ",(0,i.jsx)(t.code,{children:"."})," operator followed by the field name."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/struct.move anchor=access",children:'// Access the `name` field of the `Artist` struct.\nlet artist_name = artist.name;\n\n// Access a field of the `Artist` struct.\nassert!(artist.name == b"The Beatles".to_string());\n\n// Mutate the `name` field of the `Artist` struct.\nartist.name = b"Led Zeppelin".to_string();\n\n// Check that the `name` field has been mutated.\nassert!(artist.name == b"Led Zeppelin".to_string());\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Only the module defining the struct can access its fields (both mutably and immutably). So the above\ncode should be in the same module as the ",(0,i.jsx)(t.code,{children:"Artist"})," struct."]}),"\n",(0,i.jsx)(t.h2,{id:"unpacking-a-struct",children:"Unpacking a struct"}),"\n",(0,i.jsxs)(t.p,{children:["Structs are non-discardable by default, meaning that the initialized struct value must be used,\neither by storing it or unpacking it. Unpacking a struct means deconstructing it into its fields.\nThis is done using the ",(0,i.jsx)(t.code,{children:"let"})," keyword followed by the struct name and the field names."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/struct.move anchor=unpack",children:"// Unpack the `Artist` struct and create a new variable `name`\n// with the value of the `name` field.\nlet Artist { name } = artist;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In the example above we unpack the ",(0,i.jsx)(t.code,{children:"Artist"})," struct and create a new variable ",(0,i.jsx)(t.code,{children:"name"})," with the value\nof the ",(0,i.jsx)(t.code,{children:"name"})," field. Because the variable is not used, the compiler will raise a warning. To\nsuppress the warning, you can use the underscore ",(0,i.jsx)(t.code,{children:"_"})," to indicate that the variable is intentionally\nunused."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/struct.move anchor=unpack_ignore",children:"// Unpack the `Artist` struct and ignore the `name` field.\nlet Artist { name: _ } = artist;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./../../reference/structs",children:"Structs"})," in the Move Reference."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);