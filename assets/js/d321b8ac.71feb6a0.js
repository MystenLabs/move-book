"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8153],{2626:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>m,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"move-basics/comments","title":"Comments","description":"\x3c!--","source":"@site/../book/move-basics/comments.md","sourceDirName":"move-basics","slug":"/move-basics/comments","permalink":"/move-basics/comments","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.1. Modules","permalink":"/move-basics/module"},"next":{"title":"5.3. Primitive Types","permalink":"/move-basics/primitive-types"}}');var s=o(3420),c=o(5521);const i={},m="Comments",a={},r=[{value:"Line Comment",id:"line-comment",level:2},{value:"Block Comment",id:"block-comment",level:2},{value:"Doc Comment",id:"doc-comment",level:2},{value:"Whitespace",id:"whitespace",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"comments",children:"Comments"})}),"\n",(0,s.jsx)(n.p,{children:"Comments are a way to add notes or document your code. They are ignored by the compiler and don't\nresult in Move bytecode. You can use comments to explain what your code does, add notes to yourself\nor other developers, temporarily remove a part of your code, or generate documentation. There are\nthree types of comments in Move: line comments, block comments, and doc comments."}),"\n",(0,s.jsx)(n.h2,{id:"line-comment",children:"Line Comment"}),"\n",(0,s.jsxs)(n.p,{children:["You can use a double slash ",(0,s.jsx)(n.code,{children:"//"})," to comment out the rest of the line. Everything after ",(0,s.jsx)(n.code,{children:"//"})," will be\nignored by the compiler."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/comments-line.move anchor=main",children:"module book::comments_line;\n\n// let's add a note to everything!\nfun some_function_with_numbers() {\n    let a = 10;\n    // let b = 10 this line is commented and won't be executed\n    let b = 5; // here comment is placed after code\n    a + b; // result is 15, not 10!\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"block-comment",children:"Block Comment"}),"\n",(0,s.jsxs)(n.p,{children:["Block comments are used to comment out a block of code. They start with ",(0,s.jsx)(n.code,{children:"/*"})," and end with ",(0,s.jsx)(n.code,{children:"*/"}),".\nEverything between ",(0,s.jsx)(n.code,{children:"/*"})," and ",(0,s.jsx)(n.code,{children:"*/"})," will be ignored by the compiler. You can use block comments to\ncomment out a single line or multiple lines. You can even use them to comment out a part of a line."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/comments-block.move anchor=main",children:"module book::comments_block;\n\nfun /* you can comment everywhere */ go_wild() {\n    /* here\n        there\n        everywhere */ let a = 10;\n    let b = /* even here */ 10; /* and again */\n    a + b;\n}\n/* you can use it to remove certain expressions or definitions\nfun empty_commented_out() {\n\n}\n*/\n"})}),"\n",(0,s.jsx)(n.p,{children:"This example is a bit extreme, but it shows all the ways that you can use block comments."}),"\n",(0,s.jsx)(n.h2,{id:"doc-comment",children:"Doc Comment"}),"\n",(0,s.jsxs)(n.p,{children:["Documentation comments are special comments that are used to generate documentation for your code.\nThey are similar to block comments but start with three slashes ",(0,s.jsx)(n.code,{children:"///"})," and are placed before the\ndefinition of the item they document."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/comments-doc.move anchor=main",children:"/// Module has documentation!\nmodule book::comments_doc;\n\n/// This is a 0x0 address constant!\nconst AN_ADDRESS: address = @0x0;\n\n/// This is a struct!\npublic struct AStruct {\n    /// This is a field of a struct!\n    a_field: u8,\n}\n\n/// This function does something!\n/// And it's documented!\nfun do_something() {}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"whitespace",children:"Whitespace"}),"\n",(0,s.jsx)(n.p,{children:"Unlike some languages, whitespace (spaces, tabs, and newlines) have no impact on the meaning of the\nprogram."})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5521:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>m});var t=o(6672);const s={},c=t.createContext(s);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);