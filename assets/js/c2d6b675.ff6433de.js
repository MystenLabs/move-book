"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70],{855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"storage/key-ability","title":"The Key Ability","description":"In the Basic Syntax chapter we already covered two out of four abilities -","source":"@site/../book/storage/key-ability.md","sourceDirName":"storage","slug":"/storage/key-ability","permalink":"/storage/key-ability","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"Using Objects","permalink":"/storage/"},"next":{"title":"7.2. Storage Functions","permalink":"/storage/storage-functions"}}');var r=n(3420),s=n(5521);const o={},a="The Key Ability",c={},d=[{value:"Object Definition",id:"object-definition",level:2},{value:"Types with the <code>key</code> Ability",id:"types-with-the-key-ability",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"the-key-ability",children:"The Key Ability"})}),"\n",(0,r.jsxs)(t.p,{children:["In the ",(0,r.jsx)(t.a,{href:"./../move-basics",children:"Basic Syntax"})," chapter we already covered two out of four abilities -\n",(0,r.jsx)(t.a,{href:"./../move-basics/drop-ability",children:"Drop"})," and ",(0,r.jsx)(t.a,{href:"./../move-basics/copy-ability",children:"Copy"}),". They affect the\nbehavior of the value in a scope and are not directly related to storage. It is time to cover the\n",(0,r.jsx)(t.code,{children:"key"})," ability, which allows the struct to be stored."]}),"\n",(0,r.jsxs)(t.p,{children:["Historically, the ",(0,r.jsx)(t.code,{children:"key"})," ability was created to mark the type as a ",(0,r.jsx)(t.em,{children:"key in the storage"}),". A type with\nthe ",(0,r.jsx)(t.code,{children:"key"})," ability could be stored at top-level in the storage, and could be ",(0,r.jsx)(t.em,{children:"directly owned"})," by an\naccount or address. With the introduction of the ",(0,r.jsx)(t.a,{href:"./../object",children:"Object Model"}),", the ",(0,r.jsx)(t.code,{children:"key"})," ability\nnaturally became the defining ability for the object."]}),"\n",(0,r.jsx)(t.h2,{id:"object-definition",children:"Object Definition"}),"\n",(0,r.jsxs)(t.p,{children:["A struct with the ",(0,r.jsx)(t.code,{children:"key"})," ability is considered an object and can be used in the storage functions.\nThe Sui Verifier will require the first field of the struct to be named ",(0,r.jsx)(t.code,{children:"id"})," and have the type\n",(0,r.jsx)(t.code,{children:"UID"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-move",children:"public struct Object has key {\n    id: UID, // required\n    name: String,\n}\n\n/// Creates a new Object with a Unique ID\npublic fun new(name: String, ctx: &mut TxContext): Object {\n    Object {\n        id: object::new(ctx), // creates a new UID\n        name,\n    }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["A struct with the ",(0,r.jsx)(t.code,{children:"key"})," ability is still a struct, and can have any number of fields and associated\nfunctions. There is no special handling or syntax for packing, accessing or unpacking the struct."]}),"\n",(0,r.jsxs)(t.p,{children:["However, because the first field of an object struct must be of type ",(0,r.jsx)(t.code,{children:"UID"})," - a non-copyable and\nnon-droppable type (we will get to it very soon!), the struct transitively cannot have ",(0,r.jsx)(t.code,{children:"drop"})," and\n",(0,r.jsx)(t.code,{children:"copy"})," abilities. Thus, the object is non-discardable by design."]}),"\n",(0,r.jsxs)(t.h2,{id:"types-with-the-key-ability",children:["Types with the ",(0,r.jsx)(t.code,{children:"key"})," Ability"]}),"\n",(0,r.jsxs)(t.p,{children:["Due to the ",(0,r.jsx)(t.code,{children:"UID"})," requirement for types with ",(0,r.jsx)(t.code,{children:"key"}),", none of the native types in Move can have the\n",(0,r.jsx)(t.code,{children:"key"})," ability, nor can any of the ",(0,r.jsx)(t.a,{href:"./../move-basics/standard-library",children:"Standard Library"})," types. The\n",(0,r.jsx)(t.code,{children:"key"})," ability is only present in the ",(0,r.jsx)(t.a,{href:"./../programmability/sui-framework",children:"Sui Framework"})," and custom\ntypes."]}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.p,{children:["Key ability defines the object in Move, and objects are intended to be ",(0,r.jsx)(t.em,{children:"stored"}),". In the next section\nwe present the ",(0,r.jsx)(t.code,{children:"sui::transfer"})," module, which provides native storage functions for objects."]}),"\n",(0,r.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"./../../reference/abilities",children:"Type Abilities"})," in the Move Reference."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},5521:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6672);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);