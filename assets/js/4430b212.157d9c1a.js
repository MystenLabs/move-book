"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4635],{4683:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/2024-migration-guide","title":"Move 2024 Migration Guide","description":"Move 2024 is the new edition of the Move language that is maintained by Mysten Labs. This guide is","source":"@site/../book/guides/2024-migration-guide.md","sourceDirName":"guides","slug":"/guides/2024-migration-guide","permalink":"/guides/2024-migration-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.17. BCS","permalink":"/programmability/bcs"},"next":{"title":"Upgradability Practices","permalink":"/guides/upgradeability-practices"}}');var o=i(3420),s=i(5521);const r={},d="Move 2024 Migration Guide",a={},l=[{value:"Using the New Edition",id:"using-the-new-edition",level:2},{value:"Migration Tool",id:"migration-tool",level:2},{value:"Mutable Bindings with <code>let mut</code>",id:"mutable-bindings-with-let-mut",level:2},{value:"Friends are Deprecated",id:"friends-are-deprecated",level:2},{value:"Struct Visibility",id:"struct-visibility",level:2},{value:"Method Syntax",id:"method-syntax",level:2},{value:"Methods for Built-in Types",id:"methods-for-built-in-types",level:2},{value:"Borrowing Operator",id:"borrowing-operator",level:2},{value:"Method Aliases",id:"method-aliases",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"move-2024-migration-guide",children:"Move 2024 Migration Guide"})}),"\n",(0,o.jsx)(n.p,{children:"Move 2024 is the new edition of the Move language that is maintained by Mysten Labs. This guide is\nintended to help you understand the differences between the 2024 edition and the previous version of\nthe Move language."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["This guide provides a high-level overview of the changes in the new edition. For a more detailed\nand exhaustive list of changes, refer to the\n",(0,o.jsx)(n.a,{href:"https://docs.sui.io/guides/developer/advanced/move-2024-migration",children:"Sui Documentation"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"using-the-new-edition",children:"Using the New Edition"}),"\n",(0,o.jsxs)(n.p,{children:["To use the new edition, you need to specify the edition in the ",(0,o.jsx)(n.code,{children:"move"})," file. The edition is specified\nin the ",(0,o.jsx)(n.code,{children:"move"})," file using the ",(0,o.jsx)(n.code,{children:"edition"})," keyword. Currently, the only available edition is\n",(0,o.jsx)(n.code,{children:"2024.beta"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:'edition = "2024"\n# alternatively, for new features:\nedition = "2024.beta"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"migration-tool",children:"Migration Tool"}),"\n",(0,o.jsx)(n.p,{children:"The Move CLI has a migration tool that updates the code to the new edition. To use the migration\ntool, run the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ sui move migrate\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The migration tool will update the code to use the ",(0,o.jsx)(n.code,{children:"let mut"})," syntax, the new ",(0,o.jsx)(n.code,{children:"public"})," modifier for\nstructs, and the ",(0,o.jsx)(n.code,{children:"public(package)"})," function visibility instead of ",(0,o.jsx)(n.code,{children:"friend"})," declarations."]}),"\n",(0,o.jsxs)(n.h2,{id:"mutable-bindings-with-let-mut",children:["Mutable Bindings with ",(0,o.jsx)(n.code,{children:"let mut"})]}),"\n",(0,o.jsxs)(n.p,{children:["Move 2024 introduces ",(0,o.jsx)(n.code,{children:"let mut"})," syntax to declare mutable variables. The ",(0,o.jsx)(n.code,{children:"let mut"})," syntax is used to\ndeclare a mutable variable that can be changed after it is declared."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"let mut"})," declaration is now required for mutable variables. Compiler will emit an error if you\ntry to reassign a variable without the ",(0,o.jsx)(n.code,{children:"mut"})," keyword."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"// Move 2020\nlet x: u64 = 10;\nx = 20;\n\n// Move 2024\nlet mut x: u64 = 10;\nx = 20;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Additionally, the ",(0,o.jsx)(n.code,{children:"mut"})," keyword is used in tuple destructuring and function arguments to declare\nmutable variables."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"// takes by value and mutates\nfun takes_by_value_and_mutates(mut v: Value): Value {\n    v.field = 10;\n    v\n}\n\n// `mut` should be placed before the variable name\nfun destruct() {\n    let (x, y) = point::get_point();\n    let (mut x, y) = point::get_point();\n    let (mut x, mut y) = point::get_point();\n}\n\n// in struct unpack\nfun unpack() {\n    let Point { x, mut y } = point::get_point();\n    let Point { mut x, mut y } = point::get_point();\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"friends-are-deprecated",children:"Friends are Deprecated"}),"\n",(0,o.jsxs)(n.p,{children:["In Move 2024, the ",(0,o.jsx)(n.code,{children:"friend"})," keyword is deprecated. Instead, you can use the ",(0,o.jsx)(n.code,{children:"public(package)"}),"\nvisibility modifier to make functions visible to other modules in the same package."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"// Move 2020\nfriend book::friend_module;\npublic(friend) fun protected_function() {}\n\n// Move 2024\npublic(package) fun protected_function_2024() {}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"struct-visibility",children:"Struct Visibility"}),"\n",(0,o.jsxs)(n.p,{children:["In Move 2024, structs get a visibility modifier. Currently, the only available visibility modifier\nis ",(0,o.jsx)(n.code,{children:"public"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"// Move 2020\nstruct Book {}\n\n// Move 2024\npublic struct Book {}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"method-syntax",children:"Method Syntax"}),"\n",(0,o.jsx)(n.p,{children:"In the new edition, functions which have a struct as the first argument are associated with the\nstruct. This means that the function can be called using the dot notation. Methods defined in the\nsame module with the type are automatically exported."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Methods are automatically exported if the type is defined in the same module as the method. It is\nimpossible to export methods for types defined in other modules. However, you can create\n",(0,o.jsx)(n.a,{href:"#method-aliases",children:"custom aliases"})," for methods in the module scope."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"public fun count(c: &Counter): u64 { /* ... */ }\n\nfun use_counter() {\n    // move 2020\n    let count = counter::count(&c);\n\n    // move 2024\n    let count = c.count();\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"methods-for-built-in-types",children:"Methods for Built-in Types"}),"\n",(0,o.jsxs)(n.p,{children:["In Move 2024, some of the native and standard types received associated methods. For example, the\n",(0,o.jsx)(n.code,{children:"vector"})," type has a ",(0,o.jsx)(n.code,{children:"to_string"})," method that converts the vector into a UTF8 string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:'fun aliases() {\n    // vector to string and ascii string\n    let str: String = b"Hello, World!".to_string();\n    let ascii: ascii::String = b"Hello, World!".to_ascii_string();\n\n    // address to bytes\n    let bytes = @0xa11ce.to_bytes();\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For the full list of built-in aliases, refer to the\n",(0,o.jsx)(n.a,{href:"./../move-basics/standard-library#source-code",children:"Standard Library"})," and\n",(0,o.jsx)(n.a,{href:"./../programmability/sui-framework#source-code",children:"Sui Framework"})," source code."]}),"\n",(0,o.jsx)(n.h2,{id:"borrowing-operator",children:"Borrowing Operator"}),"\n",(0,o.jsxs)(n.p,{children:["Some of the built-in types support borrowing operators. The borrowing operator is used to get a\nreference to the element at the specified index. The borrowing operator is defined as ",(0,o.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"fun play_vec() {\n    let v = vector[1,2,3,4];\n    let first = &v[0];         // calls vector::borrow(v, 0)\n    let first_mut = &mut v[0]; // calls vector::borrow_mut(v, 0)\n    let first_copy = v[0];     // calls *vector::borrow(v, 0)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types that support the borrowing operator are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"vector"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::vec_map::VecMap"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::table::Table"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::bag::Bag"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::object_table::ObjectTable"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::object_bag::ObjectBag"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sui::linked_table::LinkedTable"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To implement the borrowing operator for a custom type, you need to add a ",(0,o.jsx)(n.code,{children:"#[syntax(index)]"}),"\nattribute to the methods."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"#[syntax(index)]\npublic fun borrow(c: &List<T>, key: String): &T { /* ... */ }\n\n#[syntax(index)]\npublic fun borrow_mut(c: &mut List<T>, key: String): &mut T { /* ... */ }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"method-aliases",children:"Method Aliases"}),"\n",(0,o.jsx)(n.p,{children:"In Move 2024, methods can be associated with types. The alias can be defined for any type locally to\nthe module; or publicly, if the type is defined in the same module."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-move",children:"// my_module.move\n// Local: type is foreign to the module\nuse fun my_custom_function as vector.do_magic;\n\n// sui-framework/kiosk/kiosk.move\n// Exported: type is defined in the same module\npublic use fun kiosk_owner_cap_for as KioskOwnerCap.kiosk;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},5521:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6672);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);