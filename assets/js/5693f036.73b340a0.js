"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1671],{5521:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6672);const a={},c=s.createContext(a);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(c.Provider,{value:n},e.children)}},8768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"concepts/what-is-a-transaction","title":"Transaction","description":"Transaction is a fundamental concept in the blockchain world. It is a way to interact with a","source":"@site/../book/concepts/what-is-a-transaction.md","sourceDirName":"concepts","slug":"/concepts/what-is-a-transaction","permalink":"/concepts/what-is-a-transaction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"4.4. Account","permalink":"/concepts/what-is-an-account"},"next":{"title":"Move Basics","permalink":"/move-basics/"}}');var a=t(3420),c=t(5521);const i={},o="Transaction",r={},h=[{value:"Transaction Structure",id:"transaction-structure",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Commands",id:"commands",level:2},{value:"Transaction Effects",id:"transaction-effects",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"transaction",children:"Transaction"})}),"\n",(0,a.jsx)(n.p,{children:"Transaction is a fundamental concept in the blockchain world. It is a way to interact with a\nblockchain. Transactions are used to change the state of the blockchain, and they are the only way\nto do so. In Move, transactions are used to call functions in a package, deploy new packages, and\nupgrade existing ones."}),"\n",(0,a.jsx)(n.h2,{id:"transaction-structure",children:"Transaction Structure"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Every transaction explicitly specifies the objects it operates on!"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Transactions consist of:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["a sender - the ",(0,a.jsx)(n.a,{href:"./what-is-an-account",children:"account"})," that ",(0,a.jsx)(n.em,{children:"signs"})," the transaction;"]}),"\n",(0,a.jsx)(n.li,{children:"a list (or a chain) of commands - the operations to be executed;"}),"\n",(0,a.jsxs)(n.li,{children:["command inputs - the arguments for the commands: either ",(0,a.jsx)(n.code,{children:"pure"})," - simple values like numbers or\nstrings, or ",(0,a.jsx)(n.code,{children:"object"})," - objects that the transaction will access;"]}),"\n",(0,a.jsxs)(n.li,{children:["a gas object - the ",(0,a.jsx)(n.code,{children:"Coin"})," object used to pay for the transaction;"]}),"\n",(0,a.jsx)(n.li,{children:"gas price and budget - the cost of the transaction;"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"inputs",children:"Inputs"}),"\n",(0,a.jsx)(n.p,{children:"Transaction inputs are the arguments for the transaction and are split between 2 types:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Pure arguments: These are mostly ",(0,a.jsx)(n.a,{href:"../move-basics/primitive-types",children:"primitive types"})," with some extra\nadditions. A pure argument can be: - ",(0,a.jsx)(n.a,{href:"../move-basics/primitive-types#booleans",children:(0,a.jsx)(n.code,{children:"bool"})}),". -\n",(0,a.jsx)(n.a,{href:"../move-basics/primitive-types#integer-types",children:"unsigned integer"})," (",(0,a.jsx)(n.code,{children:"u8"}),", ",(0,a.jsx)(n.code,{children:"u16"}),", ",(0,a.jsx)(n.code,{children:"u32"}),", ",(0,a.jsx)(n.code,{children:"u64"}),",\n",(0,a.jsx)(n.code,{children:"u128"}),", ",(0,a.jsx)(n.code,{children:"u256"}),"). - ",(0,a.jsx)(n.a,{href:"../move-basics/address",children:(0,a.jsx)(n.code,{children:"address"})}),". -\n",(0,a.jsx)(n.a,{href:"../move-basics/string",children:(0,a.jsx)(n.code,{children:"std::string::String"})}),", UTF8 strings. -\n",(0,a.jsx)(n.a,{href:"../move-basics/string#ascii-strings",children:(0,a.jsx)(n.code,{children:"std::ascii::String"})}),", ASCII strings. -\n",(0,a.jsx)(n.a,{href:"../move-basics/vector",children:(0,a.jsx)(n.code,{children:"vector<T>"})}),", where ",(0,a.jsx)(n.code,{children:"T"})," is a pure type. -\n",(0,a.jsx)(n.a,{href:"../move-basics/option",children:(0,a.jsx)(n.code,{children:"std::option::Option<T>"})}),", where ",(0,a.jsx)(n.code,{children:"T"})," is a pure type. -\n",(0,a.jsx)(n.a,{href:"../storage/uid-and-id",children:(0,a.jsx)(n.code,{children:"std::object::ID"})}),", typically points to an object. See also\n",(0,a.jsx)(n.a,{href:"../object/object-model",children:"What is an Object"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Object arguments: These are objects or references of objects that the transaction will access. An\nobject argument needs to be either a shared object, a frozen object, or an object that the\ntransaction sender owns for the transaction to be successful. For more see\n",(0,a.jsx)(n.a,{href:"../object",children:"Object Model"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,a.jsx)(n.p,{children:"Sui transactions may consist of multiple commands. Each command is a single built-in command (like\npublishing a package) or a call to a function in an already published package. The commands are\nexecuted in the order they are listed in the transaction, and they can use the results of the\nprevious commands, forming a chain. Transaction either succeeds or fails as a whole."}),"\n",(0,a.jsx)(n.p,{children:"Schematically, a transaction looks like this (in pseudo-code):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Inputs:\n- sender = 0xa11ce\n\nCommands:\n- payment = SplitCoins(Gas, [ 1000 ])\n- item = MoveCall(0xAAA::market::purchase, [ payment ])\n- TransferObjects(item, sender)\n"})}),"\n",(0,a.jsx)(n.p,{children:"In this example, the transaction consists of three commands:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"SplitCoins"})," - a built-in command that splits a new coin from the passed object, in this case,\nthe ",(0,a.jsx)(n.code,{children:"Gas"})," object;"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MoveCall"})," - a command that calls a function ",(0,a.jsx)(n.code,{children:"purchase"})," in a package ",(0,a.jsx)(n.code,{children:"0xAAA"}),", module ",(0,a.jsx)(n.code,{children:"market"}),"\nwith the given arguments - the ",(0,a.jsx)(n.code,{children:"payment"})," object;"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"TransferObjects"})," - a built-in command that transfers the object to the recipient."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"transaction-effects",children:"Transaction Effects"}),"\n",(0,a.jsx)(n.p,{children:"Transaction effects are the changes that a transaction makes to the blockchain state. More\nspecifically, a transaction can change the state in the following ways:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"use the gas object to pay for the transaction;"}),"\n",(0,a.jsx)(n.li,{children:"create, update, or delete objects;"}),"\n",(0,a.jsx)(n.li,{children:"emit events;"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The result of the executed transaction consists of different parts:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Transaction Digest - the hash of the transaction which is used to identify the transaction;"}),"\n",(0,a.jsx)(n.li,{children:"Transaction Data - the inputs, commands and gas object used in the transaction;"}),"\n",(0,a.jsx)(n.li,{children:'Transaction Effects - the status and the "effects" of the transaction, more specifically: the\nstatus of the transaction, updates to objects and their new versions, the gas object used, the gas\ncost of the transaction, and the events emitted by the transaction;'}),"\n",(0,a.jsxs)(n.li,{children:["Events - the custom ",(0,a.jsx)(n.a,{href:"./../programmability/events",children:"events"})," emitted by the transaction;"]}),"\n",(0,a.jsxs)(n.li,{children:["Object Changes - the changes made to the objects, including the ",(0,a.jsx)(n.em,{children:"change of ownership"}),";"]}),"\n",(0,a.jsx)(n.li,{children:"Balance Changes - the changes made to the aggregate balances of the account involved in the\ntransaction;"}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);