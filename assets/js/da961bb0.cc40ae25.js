"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8060],{5521:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>i});var s=n(6672);const c={},t=s.createContext(c);function d(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:d(e.components),s.createElement(t.Provider,{value:r},e.children)}},6541:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>x,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"primitive-types/vector","title":"Vector | Reference","description":"","source":"@site/../reference/primitive-types/vector.md","sourceDirName":"primitive-types","slug":"/primitive-types/vector","permalink":"/reference/primitive-types/vector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Vector | Reference","description":""},"sidebar":"referenceSidebar","previous":{"title":"2.3 Address","permalink":"/reference/primitive-types/address"},"next":{"title":"2.5 References","permalink":"/reference/primitive-types/references"}}');var c=n(3420),t=n(5521);const d={title:"Vector | Reference",description:""},i="Vector",o={},l=[{value:"Literals",id:"literals",level:2},{value:"General <code>vector</code> Literals",id:"general-vector-literals",level:3},{value:"Example Vector Literals",id:"example-vector-literals",level:4},{value:"<code>vector&lt;u8&gt;</code> literals",id:"vectoru8-literals",level:3},{value:"Byte Strings",id:"byte-strings",level:4},{value:"Hex Strings",id:"hex-strings",level:4},{value:"Example String Literals",id:"example-string-literals",level:4},{value:"Operations",id:"operations",level:2},{value:"Example",id:"example",level:2},{value:"Destroying and copying <code>vector</code>s",id:"destroying-and-copying-vectors",level:2},{value:"Ownership",id:"ownership",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(r.header,{children:(0,c.jsx)(r.h1,{id:"vector",children:"Vector"})}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"vector<T>"})," is the only primitive collection type provided by Move. A ",(0,c.jsx)(r.code,{children:"vector<T>"})," is a homogeneous\ncollection of ",(0,c.jsx)(r.code,{children:"T"}),'\'s that can grow or shrink by pushing/popping values off the "end".']}),"\n",(0,c.jsxs)(r.p,{children:["A ",(0,c.jsx)(r.code,{children:"vector<T>"})," can be instantiated with any type ",(0,c.jsx)(r.code,{children:"T"}),". For example, ",(0,c.jsx)(r.code,{children:"vector<u64>"}),", ",(0,c.jsx)(r.code,{children:"vector<address>"}),",\n",(0,c.jsx)(r.code,{children:"vector<0x42::my_module::MyData>"}),", and ",(0,c.jsx)(r.code,{children:"vector<vector<u8>>"})," are all valid vector types."]}),"\n",(0,c.jsx)(r.h2,{id:"literals",children:"Literals"}),"\n",(0,c.jsxs)(r.h3,{id:"general-vector-literals",children:["General ",(0,c.jsx)(r.code,{children:"vector"})," Literals"]}),"\n",(0,c.jsxs)(r.p,{children:["Vectors of any type can be created with ",(0,c.jsx)(r.code,{children:"vector"})," literals."]}),"\n",(0,c.jsxs)(r.table,{children:[(0,c.jsx)(r.thead,{children:(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.th,{children:"Syntax"}),(0,c.jsx)(r.th,{children:"Type"}),(0,c.jsx)(r.th,{children:"Description"})]})}),(0,c.jsxs)(r.tbody,{children:[(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector[]"})}),(0,c.jsxs)(r.td,{children:[(0,c.jsx)(r.code,{children:"vector[]: vector<T>"})," where ",(0,c.jsx)(r.code,{children:"T"})," is any single, non-reference type"]}),(0,c.jsx)(r.td,{children:"An empty vector"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector[e1, ..., en]"})}),(0,c.jsxs)(r.td,{children:[(0,c.jsx)(r.code,{children:"vector[e1, ..., en]: vector<T>"})," where ",(0,c.jsx)(r.code,{children:"e_i: T"})," s.t. ",(0,c.jsx)(r.code,{children:"0 < i <= n"})," and ",(0,c.jsx)(r.code,{children:"n > 0"})]}),(0,c.jsxs)(r.td,{children:["A vector with ",(0,c.jsx)(r.code,{children:"n"})," elements (of length ",(0,c.jsx)(r.code,{children:"n"}),")"]})]})]})]}),"\n",(0,c.jsxs)(r.p,{children:["In these cases, the type of the ",(0,c.jsx)(r.code,{children:"vector"})," is inferred, either from the element type or from the\nvector's usage. If the type cannot be inferred, or simply for added clarity, the type can be\nspecified explicitly:"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"vector<T>[]: vector<T>\nvector<T>[e1, ..., en]: vector<T>\n"})}),"\n",(0,c.jsx)(r.h4,{id:"example-vector-literals",children:"Example Vector Literals"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"(vector[]: vector<bool>);\n(vector[0u8, 1u8, 2u8]: vector<u8>);\n(vector<u128>[]: vector<u128>);\n(vector<address>[@0x42, @0x100]: vector<address>);\n"})}),"\n",(0,c.jsxs)(r.h3,{id:"vectoru8-literals",children:[(0,c.jsx)(r.code,{children:"vector<u8>"})," literals"]}),"\n",(0,c.jsxs)(r.p,{children:['A common use-case for vectors in Move is to represent "byte arrays", which are represented with\n',(0,c.jsx)(r.code,{children:"vector<u8>"}),". These values are often used for cryptographic purposes, such as a public key or a hash\nresult. These values are so common that specific syntax is provided to make the values more\nreadable, as opposed to having to use ",(0,c.jsx)(r.code,{children:"vector[]"})," where each individual ",(0,c.jsx)(r.code,{children:"u8"})," value is specified in\nnumeric form."]}),"\n",(0,c.jsxs)(r.p,{children:["There are currently two supported types of ",(0,c.jsx)(r.code,{children:"vector<u8>"})," literals, ",(0,c.jsx)(r.em,{children:"byte strings"})," and ",(0,c.jsx)(r.em,{children:"hex strings"}),"."]}),"\n",(0,c.jsx)(r.h4,{id:"byte-strings",children:"Byte Strings"}),"\n",(0,c.jsxs)(r.p,{children:["Byte strings are quoted string literals prefixed by a ",(0,c.jsx)(r.code,{children:"b"}),", e.g. ",(0,c.jsx)(r.code,{children:'b"Hello!\\n"'}),"."]}),"\n",(0,c.jsx)(r.p,{children:"These are ASCII encoded strings that allow for escape sequences. Currently, the supported escape\nsequences are:"}),"\n",(0,c.jsxs)(r.table,{children:[(0,c.jsx)(r.thead,{children:(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.th,{children:"Escape Sequence"}),(0,c.jsx)(r.th,{children:"Description"})]})}),(0,c.jsxs)(r.tbody,{children:[(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\n"})}),(0,c.jsx)(r.td,{children:"New line (or Line feed)"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\r"})}),(0,c.jsx)(r.td,{children:"Carriage return"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\t"})}),(0,c.jsx)(r.td,{children:"Tab"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\\\"})}),(0,c.jsx)(r.td,{children:"Backslash"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\0"})}),(0,c.jsx)(r.td,{children:"Null"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:'\\"'})}),(0,c.jsx)(r.td,{children:"Quote"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"\\xHH"})}),(0,c.jsxs)(r.td,{children:["Hex escape, inserts the hex byte sequence ",(0,c.jsx)(r.code,{children:"HH"})]})]})]})]}),"\n",(0,c.jsx)(r.h4,{id:"hex-strings",children:"Hex Strings"}),"\n",(0,c.jsxs)(r.p,{children:["Hex strings are quoted string literals prefixed by a ",(0,c.jsx)(r.code,{children:"x"}),", e.g. ",(0,c.jsx)(r.code,{children:'x"48656C6C6F210A"'}),"."]}),"\n",(0,c.jsxs)(r.p,{children:["Each byte pair, ranging from ",(0,c.jsx)(r.code,{children:"00"})," to ",(0,c.jsx)(r.code,{children:"FF"}),", is interpreted as hex encoded ",(0,c.jsx)(r.code,{children:"u8"})," value. So each byte\npair corresponds to a single entry in the resulting ",(0,c.jsx)(r.code,{children:"vector<u8>"}),"."]}),"\n",(0,c.jsx)(r.h4,{id:"example-string-literals",children:"Example String Literals"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:'fun byte_and_hex_strings() {\n    assert!(b"" == x"", 0);\n    assert!(b"Hello!\\n" == x"48656C6C6F210A", 1);\n    assert!(b"\\x48\\x65\\x6C\\x6C\\x6F\\x21\\x0A" == x"48656C6C6F210A", 2);\n    assert!(\n        b"\\"Hello\\tworld!\\"\\n \\r \\\\Null=\\0" ==\n            x"2248656C6C6F09776F726C6421220A200D205C4E756C6C3D00",\n        3\n    );\n}\n'})}),"\n",(0,c.jsx)(r.h2,{id:"operations",children:"Operations"}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"vector"})," supports the following operations via the ",(0,c.jsx)(r.code,{children:"std::vector"})," module in the Move standard\nlibrary:"]}),"\n",(0,c.jsxs)(r.table,{children:[(0,c.jsx)(r.thead,{children:(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.th,{children:"Function"}),(0,c.jsx)(r.th,{children:"Description"}),(0,c.jsx)(r.th,{children:"Aborts?"})]})}),(0,c.jsxs)(r.tbody,{children:[(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::empty<T>(): vector<T>"})}),(0,c.jsxs)(r.td,{children:["Create an empty vector that can store values of type ",(0,c.jsx)(r.code,{children:"T"})]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::singleton<T>(t: T): vector<T>"})}),(0,c.jsxs)(r.td,{children:["Create a vector of size 1 containing ",(0,c.jsx)(r.code,{children:"t"})]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::push_back<T>(v: &mut vector<T>, t: T)"})}),(0,c.jsxs)(r.td,{children:["Add ",(0,c.jsx)(r.code,{children:"t"})," to the end of ",(0,c.jsx)(r.code,{children:"v"})]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::pop_back<T>(v: &mut vector<T>): T"})}),(0,c.jsxs)(r.td,{children:["Remove and return the last element in ",(0,c.jsx)(r.code,{children:"v"})]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"v"})," is empty"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::borrow<T>(v: &vector<T>, i: u64): &T"})}),(0,c.jsxs)(r.td,{children:["Return an immutable reference to the ",(0,c.jsx)(r.code,{children:"T"})," at index ",(0,c.jsx)(r.code,{children:"i"})]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"i"})," is not in bounds"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::borrow_mut<T>(v: &mut vector<T>, i: u64): &mut T"})}),(0,c.jsxs)(r.td,{children:["Return a mutable reference to the ",(0,c.jsx)(r.code,{children:"T"})," at index ",(0,c.jsx)(r.code,{children:"i"})]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"i"})," is not in bounds"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::destroy_empty<T>(v: vector<T>)"})}),(0,c.jsxs)(r.td,{children:["Delete ",(0,c.jsx)(r.code,{children:"v"})]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"v"})," is not empty"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::append<T>(v1: &mut vector<T>, v2: vector<T>)"})}),(0,c.jsxs)(r.td,{children:["Add the elements in ",(0,c.jsx)(r.code,{children:"v2"})," to the end of ",(0,c.jsx)(r.code,{children:"v1"})]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::contains<T>(v: &vector<T>, e: &T): bool"})}),(0,c.jsxs)(r.td,{children:["Return true if ",(0,c.jsx)(r.code,{children:"e"})," is in the vector ",(0,c.jsx)(r.code,{children:"v"}),". Otherwise, returns false"]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::swap<T>(v: &mut vector<T>, i: u64, j: u64)"})}),(0,c.jsxs)(r.td,{children:["Swaps the elements at the ",(0,c.jsx)(r.code,{children:"i"}),"th and ",(0,c.jsx)(r.code,{children:"j"}),"th indices in the vector ",(0,c.jsx)(r.code,{children:"v"})]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"i"})," or ",(0,c.jsx)(r.code,{children:"j"})," is out of bounds"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::reverse<T>(v: &mut vector<T>)"})}),(0,c.jsxs)(r.td,{children:["Reverses the order of the elements in the vector ",(0,c.jsx)(r.code,{children:"v"})," in place"]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::index_of<T>(v: &vector<T>, e: &T): (bool, u64)"})}),(0,c.jsxs)(r.td,{children:["Return ",(0,c.jsx)(r.code,{children:"(true, i)"})," if ",(0,c.jsx)(r.code,{children:"e"})," is in the vector ",(0,c.jsx)(r.code,{children:"v"})," at index ",(0,c.jsx)(r.code,{children:"i"}),". Otherwise, returns ",(0,c.jsx)(r.code,{children:"(false, 0)"})]}),(0,c.jsx)(r.td,{children:"Never"})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::remove<T>(v: &mut vector<T>, i: u64): T"})}),(0,c.jsxs)(r.td,{children:["Remove the ",(0,c.jsx)(r.code,{children:"i"}),"th element of the vector ",(0,c.jsx)(r.code,{children:"v"}),", shifting all subsequent elements. This is O(n) and preserves ordering of elements in the vector"]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"i"})," is out of bounds"]})]}),(0,c.jsxs)(r.tr,{children:[(0,c.jsx)(r.td,{children:(0,c.jsx)(r.code,{children:"vector::swap_remove<T>(v: &mut vector<T>, i: u64): T"})}),(0,c.jsxs)(r.td,{children:["Swap the ",(0,c.jsx)(r.code,{children:"i"}),"th element of the vector ",(0,c.jsx)(r.code,{children:"v"})," with the last element and then pop the element, This is O(1), but does not preserve ordering of elements in the vector"]}),(0,c.jsxs)(r.td,{children:["If ",(0,c.jsx)(r.code,{children:"i"})," is out of bounds"]})]})]})]}),"\n",(0,c.jsx)(r.p,{children:"More operations may be added over time."}),"\n",(0,c.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"use std::vector;\n\nlet mut v = vector::empty<u64>();\nvector::push_back(&mut v, 5);\nvector::push_back(&mut v, 6);\n\nassert!(*vector::borrow(&v, 0) == 5, 42);\nassert!(*vector::borrow(&v, 1) == 6, 42);\nassert!(vector::pop_back(&mut v) == 6, 42);\nassert!(vector::pop_back(&mut v) == 5, 42);\n"})}),"\n",(0,c.jsxs)(r.h2,{id:"destroying-and-copying-vectors",children:["Destroying and copying ",(0,c.jsx)(r.code,{children:"vector"}),"s"]}),"\n",(0,c.jsxs)(r.p,{children:["Some behaviors of ",(0,c.jsx)(r.code,{children:"vector<T>"})," depend on the abilities of the element type, ",(0,c.jsx)(r.code,{children:"T"}),". For example, vectors\ncontaining elements that do not have ",(0,c.jsx)(r.code,{children:"drop"})," cannot be implicitly discarded like ",(0,c.jsx)(r.code,{children:"v"})," in the example\nabove--they must be explicitly destroyed with ",(0,c.jsx)(r.code,{children:"vector::destroy_empty"}),"."]}),"\n",(0,c.jsxs)(r.p,{children:["Note that ",(0,c.jsx)(r.code,{children:"vector::destroy_empty"})," will abort at runtime unless ",(0,c.jsx)(r.code,{children:"vec"})," contains zero elements:"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"fun destroy_any_vector<T>(vec: vector<T>) {\n    vector::destroy_empty(vec) // deleting this line will cause a compiler error\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["But no error would occur for dropping a vector that contains elements with ",(0,c.jsx)(r.code,{children:"drop"}),":"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"fun destroy_droppable_vector<T: drop>(vec: vector<T>) {\n    // valid!\n    // nothing needs to be done explicitly to destroy the vector\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["Similarly, vectors cannot be copied unless the element type has ",(0,c.jsx)(r.code,{children:"copy"}),". In other words, a\n",(0,c.jsx)(r.code,{children:"vector<T>"})," has ",(0,c.jsx)(r.code,{children:"copy"})," if and only if ",(0,c.jsx)(r.code,{children:"T"})," has ",(0,c.jsx)(r.code,{children:"copy"}),". Note that it will be implicitly copied if\nneeded:"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"let x = vector[10];\nlet y = x; // implicit copy\nlet z = x;\n(y, z)\n"})}),"\n",(0,c.jsxs)(r.p,{children:["Keep in mind, copies of large vectors can be expensive. If this is a concern, annotating the\n",(0,c.jsx)(r.code,{children:"intended"})," usage can prevent accidental copies. For example,"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-move",children:"let x = vector[10];\nlet y = move x;\nlet z = x; // ERROR! x has been moved\n(y, z)\n"})}),"\n",(0,c.jsxs)(r.p,{children:["For more details see the sections on ",(0,c.jsx)(r.a,{href:"./../abilities",children:"type abilities"})," and ",(0,c.jsx)(r.a,{href:"./../generics",children:"generics"}),"."]}),"\n",(0,c.jsx)(r.h2,{id:"ownership",children:"Ownership"}),"\n",(0,c.jsxs)(r.p,{children:["As mentioned ",(0,c.jsx)(r.a,{href:"#destroying-and-copying-vectors",children:"above"}),", ",(0,c.jsx)(r.code,{children:"vector"})," values can be copied only if the\nelements can be copied. In that case, the copy can be done via a\n",(0,c.jsx)(r.a,{href:"./../variables#move-and-copy",children:(0,c.jsx)(r.code,{children:"copy"})})," or a\n",(0,c.jsxs)(r.a,{href:"./references#reading-and-writing-through-references",children:["dereference ",(0,c.jsx)(r.code,{children:"*"})]}),"."]})]})}function x(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}}}]);