"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7683],{215:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"programmability/dynamic-fields","title":"Dynamic Fields","description":"Sui Object model allows objects to be attached to other objects as dynamic fields. The behavior is","source":"@site/../book/programmability/dynamic-fields.md","sourceDirName":"programmability","slug":"/programmability/dynamic-fields","permalink":"/programmability/dynamic-fields","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.6. Pattern: Wrapper Type","permalink":"/programmability/wrapper-type-pattern"},"next":{"title":"8.8. Dynamic Object Fields","permalink":"/programmability/dynamic-object-fields"}}');var i=t(3420),s=t(5521);const c={},d="Dynamic Fields",r={},o=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Foreign Types as Dynamic Fields",id:"foreign-types-as-dynamic-fields",level:2},{value:"Orphaned Dynamic Fields",id:"orphaned-dynamic-fields",level:2},{value:"Custom Type as a Field Name",id:"custom-type-as-a-field-name",level:2},{value:"Exposing UID",id:"exposing-uid",level:2},{value:"Dynamic Fields vs Fields",id:"dynamic-fields-vs-fields",level:2},{value:"Limits",id:"limits",level:2},{value:"Applications",id:"applications",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const a={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"dynamic-fields",children:"Dynamic Fields"})}),"\n",(0,i.jsxs)(a.p,{children:["Sui Object model allows objects to be attached to other objects as ",(0,i.jsx)(a.em,{children:"dynamic fields"}),". The behavior is\nsimilar to how a ",(0,i.jsx)(a.code,{children:"Map"})," works in other programming languages. However, unlike a ",(0,i.jsx)(a.code,{children:"Map"})," which in Move\nwould be strictly typed (we have covered it in the ",(0,i.jsx)(a.a,{href:"./collections",children:"Collections"})," section), dynamic\nfields allow attaching objects of any type. A similar approach from the world of frontend\ndevelopment would be a JavaScript Object type which allows storing any type of data dynamically."]}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsx)(a.p,{children:"There's no limit to the number of dynamic fields that can be attached to an object. Thus, dynamic\nfields can be used to store large amounts of data that don't fit into the object limit size."}),"\n"]}),"\n",(0,i.jsxs)(a.p,{children:["Dynamic Fields allow for a wide range of applications, from splitting data into smaller parts to\navoid ",(0,i.jsx)(a.a,{href:"./../guides/building-against-limits",children:"object size limit"})," to attaching objects as a part of\napplication logic."]}),"\n",(0,i.jsx)(a.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(a.p,{children:["Dynamic Fields are defined in the ",(0,i.jsx)(a.code,{children:"sui::dynamic_field"})," module of the\n",(0,i.jsx)(a.a,{href:"./sui-framework",children:"Sui Framework"}),". They are attached to object's ",(0,i.jsx)(a.code,{children:"UID"})," via a ",(0,i.jsx)(a.em,{children:"name"}),", and can be\naccessed using that name. There can be only one field with a given name attached to an object."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",children:"module sui::dynamic_field;\n\n/// Internal object used for storing the field and value\npublic struct Field<Name: copy + drop + store, Value: store> has key {\n    /// Determined by the hash of the object ID, the field name\n    /// value and it's type, i.e. hash(parent.id || name || Name)\n    id: UID,\n    /// The value for the name of this field\n    name: Name,\n    /// The value bound to this field\n    value: Value,\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["As the definition shows, dynamic fields are stored in an internal ",(0,i.jsx)(a.code,{children:"Field"})," object, which has the\n",(0,i.jsx)(a.code,{children:"UID"})," generated in a deterministic way based on the object ID, the field name, and the field type.\nThe ",(0,i.jsx)(a.code,{children:"Field"})," object contains the field name and the value bound to it. The constraints on the ",(0,i.jsx)(a.code,{children:"Name"}),"\nand ",(0,i.jsx)(a.code,{children:"Value"})," type parameters define the abilities that the key and value must have."]}),"\n",(0,i.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(a.p,{children:["The methods available for dynamic fields are straightforward: a field can be added with ",(0,i.jsx)(a.code,{children:"add"}),",\nremoved with ",(0,i.jsx)(a.code,{children:"remove"}),", and read with ",(0,i.jsx)(a.code,{children:"borrow"})," and ",(0,i.jsx)(a.code,{children:"borrow_mut"}),". Additionally, the ",(0,i.jsx)(a.code,{children:"exists_"})," method\ncan be used to check if a field exists (for stricter checks with type, there is an\n",(0,i.jsx)(a.code,{children:"exists_with_type"})," method)."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=usage",children:'module book::dynamic_fields;\n\n// a very common alias for `dynamic_field` is `df` since the\n// module name is quite long\nuse sui::dynamic_field as df;\nuse std::string::String;\n\n/// The object that we will attach dynamic fields to.\npublic struct Character has key {\n    id: UID\n}\n\n// List of different accessories that can be attached to a character.\n// They must have the `store` ability.\npublic struct Hat has key, store { id: UID, color: u32 }\npublic struct Mustache has key, store { id: UID }\n\n#[test]\nfun test_character_and_accessories() {\n    let ctx = &mut tx_context::dummy();\n    let mut character = Character { id: object::new(ctx) };\n\n    // Attach a hat to the character\'s UID\n    df::add(\n        &mut character.id,\n        b"hat_key",\n        Hat { id: object::new(ctx), color: 0xFF0000 }\n    );\n\n    // Similarly, attach a mustache to the character\'s UID\n    df::add(\n        &mut character.id,\n        b"mustache_key",\n        Mustache { id: object::new(ctx) }\n    );\n\n    // Check that the hat and mustache are attached to the character\n    assert!(df::exists_(&character.id, b"hat_key"), 0);\n    assert!(df::exists_(&character.id, b"mustache_key"), 1);\n\n    // Modify the color of the hat\n    let hat: &mut Hat = df::borrow_mut(&mut character.id, b"hat_key");\n    hat.color = 0x00FF00;\n\n    // Remove the hat and mustache from the character\n    let hat: Hat = df::remove(&mut character.id, b"hat_key");\n    let mustache: Mustache = df::remove(&mut character.id, b"mustache_key");\n\n    // Check that the hat and mustache are no longer attached to the character\n    assert!(!df::exists_(&character.id, b"hat_key"), 0);\n    assert!(!df::exists_(&character.id, b"mustache_key"), 1);\n\n    sui::test_utils::destroy(character);\n    sui::test_utils::destroy(mustache);\n    sui::test_utils::destroy(hat);\n}\n'})}),"\n",(0,i.jsxs)(a.p,{children:["In the example above, we define a ",(0,i.jsx)(a.code,{children:"Character"})," object and two different types of accessories that\ncould never be put together in a vector. However, dynamic fields allow us to store them together in\na single object. Both objects are attached to the ",(0,i.jsx)(a.code,{children:"Character"})," via a ",(0,i.jsx)(a.code,{children:"vector<u8>"})," (bytestring\nliteral), and can be accessed using their respective names."]}),"\n",(0,i.jsxs)(a.p,{children:["As you can see, when we attached the accessories to the Character, we passed them ",(0,i.jsx)(a.em,{children:"by value"}),". In\nother words, both values were moved to a new scope, and their ownership was transferred to the\n",(0,i.jsx)(a.code,{children:"Character"})," object. If we changed the ownership of ",(0,i.jsx)(a.code,{children:"Character"})," object, the accessories would have\nbeen moved with it."]}),"\n",(0,i.jsxs)(a.p,{children:["And the last important property of dynamic fields we should highlight is that they are ",(0,i.jsx)(a.em,{children:"accessed\nthrough their parent"}),". This means that the ",(0,i.jsx)(a.code,{children:"Hat"})," and ",(0,i.jsx)(a.code,{children:"Mustache"})," objects are not directly accessible\nand follow the same rules as the parent object."]}),"\n",(0,i.jsx)(a.h2,{id:"foreign-types-as-dynamic-fields",children:"Foreign Types as Dynamic Fields"}),"\n",(0,i.jsxs)(a.p,{children:["Dynamic fields allow objects to carry data of any type, including those defined in other modules.\nThis is possible due to their generic nature and relatively weak constraints on the type parameters.\nLet's illustrate this by attaching a few different values to a ",(0,i.jsx)(a.code,{children:"Character"})," object."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=foreign_types",children:'let mut character = Character { id: object::new(ctx) };\n\n// Attach a `String` via a `vector<u8>` name\ndf::add(&mut character.id, b"string_key", b"Hello, World!".to_string());\n\n// Attach a `u64` via a `u32` name\ndf::add(&mut character.id, 1000u32, 1_000_000_000u64);\n\n// Attach a `bool` via a `bool` name\ndf::add(&mut character.id, true, false);\n'})}),"\n",(0,i.jsxs)(a.p,{children:["In this example we showed how different types can be used for both ",(0,i.jsx)(a.em,{children:"name"})," and the ",(0,i.jsx)(a.em,{children:"value"})," of a\ndynamic field. The ",(0,i.jsx)(a.code,{children:"String"})," is attached via a ",(0,i.jsx)(a.code,{children:"vector<u8>"})," name, the ",(0,i.jsx)(a.code,{children:"u64"})," is attached via a ",(0,i.jsx)(a.code,{children:"u32"}),"\nname, and the ",(0,i.jsx)(a.code,{children:"bool"})," is attached via a ",(0,i.jsx)(a.code,{children:"bool"})," name. Anything is possible with dynamic fields!"]}),"\n",(0,i.jsx)(a.h2,{id:"orphaned-dynamic-fields",children:"Orphaned Dynamic Fields"}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsxs)(a.p,{children:["To prevent orphaned dynamic fields, please, use ",(0,i.jsx)(a.a,{href:"./dynamic-collections",children:"Dynamic Collection Types"}),"\nsuch as ",(0,i.jsx)(a.code,{children:"Bag"})," as they track the dynamic fields and won't allow unpacking if there are attached\nfields."]}),"\n"]}),"\n",(0,i.jsxs)(a.p,{children:["The ",(0,i.jsx)(a.code,{children:"object::delete()"})," function, which is used to delete a UID, does not track the dynamic fields,\nand cannot prevent dynamic fields from becoming orphaned. Once the parent UID is deleted, the\ndynamic fields are not automatically deleted, and they become orphaned. This means that the dynamic\nfields are still stored in the blockchain, but they will never become accessible again."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=orphan_fields",children:'let hat = Hat { id: object::new(ctx), color: 0xFF0000 };\nlet mut character = Character { id: object::new(ctx) };\n\n// Attach a `Hat` via a `vector<u8>` name\ndf::add(&mut character.id, b"hat_key", hat);\n\n// ! DO NOT do this in your code\n// ! Danger - deleting the parent object\nlet Character { id } = character;\nid.delete();\n\n// ...`Hat` is now stuck in a limbo, it will never be accessible again\n'})}),"\n",(0,i.jsxs)(a.p,{children:["Orphaned objects are not a subject to storage rebate, and the storage fees will remain unclaimed.\nOne way to avoid orphaned dynamic fields during unpacking of an object is to return the ",(0,i.jsx)(a.code,{children:"UID"})," and\nstore it somewhere temporarily until the dynamic fields are removed and handled properly."]}),"\n",(0,i.jsx)(a.h2,{id:"custom-type-as-a-field-name",children:"Custom Type as a Field Name"}),"\n",(0,i.jsx)(a.p,{children:"In the examples above, we used primitive types as field names since they have the required set of\nabilities. But dynamic fields get even more interesting when we use custom types as field names.\nThis allows for a more structured way of storing data, and also allows for protecting the field\nnames from being accessed by other modules."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=custom_type",children:"/// A custom type with fields in it.\npublic struct AccessoryKey has copy, drop, store { name: String }\n\n/// An empty key, can be attached only once.\npublic struct MetadataKey has copy, drop, store {}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["Two field names that we defined above are ",(0,i.jsx)(a.code,{children:"AccessoryKey"})," and ",(0,i.jsx)(a.code,{children:"MetadataKey"}),". The ",(0,i.jsx)(a.code,{children:"AccessoryKey"})," has a\n",(0,i.jsx)(a.code,{children:"String"})," field in it, hence it can be used multiple times with different ",(0,i.jsx)(a.code,{children:"name"})," values. The\n",(0,i.jsx)(a.code,{children:"MetadataKey"})," is an empty key, and can be attached only once."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=custom_type_usage",children:'let mut character = Character { id: object::new(ctx) };\n\n// Attaching via an `AccessoryKey { name: b"hat" }`\ndf::add(\n    &mut character.id,\n    AccessoryKey { name: b"hat".to_string() },\n    Hat { id: object::new(ctx), color: 0xFF0000 }\n);\n// Attaching via an `AccessoryKey { name: b"mustache" }`\ndf::add(\n    &mut character.id,\n    AccessoryKey { name: b"mustache".to_string() },\n    Mustache { id: object::new(ctx) }\n);\n\n// Attaching via a `MetadataKey`\ndf::add(&mut character.id, MetadataKey {}, 42);\n'})}),"\n",(0,i.jsxs)(a.p,{children:["As you can see, custom types do work as field names but as long as they can be ",(0,i.jsx)(a.em,{children:"constructed"})," by the\nmodule, in other words - if they are ",(0,i.jsx)(a.em,{children:"internal"})," to the module and defined in it. This limitation on\nstruct packing can open up new ways in the design of the application."]}),"\n",(0,i.jsx)(a.p,{children:"This approach is used in the Object Capability pattern, where an\napplication can authorize a foreign object to perform operations in it while not exposing the\ncapabilities to other modules."}),"\n",(0,i.jsx)(a.h2,{id:"exposing-uid",children:"Exposing UID"}),"\n",(0,i.jsx)("div",{class:"warning",children:(0,i.jsxs)(a.p,{children:["Mutable access to ",(0,i.jsx)(a.code,{children:"UID"})," is a security risk. Exposing ",(0,i.jsx)(a.code,{children:"UID"})," of your type as a mutable reference can\nlead to unwanted modifications or removal of the object's dynamic fields. Additionally, it affects\nthe Transfer to Object and\n",(0,i.jsx)(a.a,{href:"./dynamic-object-fields",children:"Dynamic Object Fields"}),". Make sure to understand the implications before\nexposing the ",(0,i.jsx)(a.code,{children:"UID"})," as a mutable reference."]})}),"\n",(0,i.jsxs)(a.p,{children:["Because dynamic fields are attached to ",(0,i.jsx)(a.code,{children:"UID"}),"s, their usage in other modules depends on whether the\n",(0,i.jsx)(a.code,{children:"UID"})," can be accessed. By default struct visibility protects the ",(0,i.jsx)(a.code,{children:"id"})," field and won't let other\nmodules access it directly. However, if there's a public accessor method that returns a reference to\n",(0,i.jsx)(a.code,{children:"UID"}),", dynamic fields can be read in other modules."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=exposed_uid",children:"/// Exposes the UID of the character, so that other modules can read\n/// dynamic fields.\npublic fun uid(c: &Character): &UID {\n    &c.id\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["In the example above, we show how to expose the ",(0,i.jsx)(a.code,{children:"UID"})," of a ",(0,i.jsx)(a.code,{children:"Character"})," object. This solution may\nwork for some applications, however, it is important to remember that exposed ",(0,i.jsx)(a.code,{children:"UID"})," allows reading\n",(0,i.jsx)(a.em,{children:"any"})," dynamic field attached to the object."]}),"\n",(0,i.jsxs)(a.p,{children:["If you need to expose the ",(0,i.jsx)(a.code,{children:"UID"})," only within the package, use a restrictive visibility, like\n",(0,i.jsx)(a.code,{children:"public(package)"}),", or even better - use more specific accessor methods that would allow only reading\nspecific fields."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/dynamic-fields.move anchor=exposed_uid_measures",children:"/// Only allow modules in the same package to access the UID.\npublic(package) fun uid_package(c: &Character): &UID {\n    &c.id\n}\n\n/// Allow borrowing dynamic fields from the character.\npublic fun borrow<Name: copy + store + drop, Value: store>(\n    c: &Character,\n    n: Name\n): &Value {\n    df::borrow(&c.id, n)\n}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"dynamic-fields-vs-fields",children:"Dynamic Fields vs Fields"}),"\n",(0,i.jsx)(a.p,{children:"Dynamic Fields are more expensive than regular fields, as they require additional storage and costs\nfor accessing them. Their flexibility comes at a price, and it is important to understand the\nimplications when making a decision between using dynamic fields and regular fields."}),"\n",(0,i.jsx)(a.h2,{id:"limits",children:"Limits"}),"\n",(0,i.jsxs)(a.p,{children:["Dynamic Fields are not subject to the ",(0,i.jsx)(a.a,{href:"./../guides/building-against-limits",children:"object size limit"}),", and\ncan be used to store large amounts of data. However, they are still subject to the\n",(0,i.jsx)(a.a,{href:"./../guides/building-against-limits",children:"dynamic fields created limit"}),", which is set to 1000 fields per\ntransaction."]}),"\n",(0,i.jsx)(a.h2,{id:"applications",children:"Applications"}),"\n",(0,i.jsxs)(a.p,{children:["Dynamic Fields can play a crucial role in applications of any complexity. They open up a variety of\ndifferent use cases, from storing heterogeneous data to attaching objects as part of the application\nlogic. They allow for certain ",(0,i.jsx)(a.a,{href:"./../guides/upgradeability-practices",children:"upgradeability practices"})," based\non the ability to define them ",(0,i.jsx)(a.em,{children:"later"})," and change the type of the field."]}),"\n",(0,i.jsx)(a.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(a.p,{children:["In the next section we will cover ",(0,i.jsx)(a.a,{href:"./dynamic-object-fields",children:"Dynamic Object Fields"})," and explain how\nthey differ from dynamic fields, and what are the implications of using them."]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5521:(e,a,t)=>{t.d(a,{R:()=>c,x:()=>d});var n=t(6672);const i={},s=n.createContext(i);function c(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);