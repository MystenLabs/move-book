"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6174],{4114:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"storage/store-ability","title":"Ability: Store","description":"Now that you have an understanding of top-level storage functions which are enabled by the","source":"@site/../book/storage/store-ability.md","sourceDirName":"storage","slug":"/storage/store-ability","permalink":"/storage/store-ability","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"7.2. Storage Functions","permalink":"/storage/storage-functions"},"next":{"title":"7.4. UID and ID","permalink":"/storage/uid-and-id"}}');var s=t(3420),r=t(5521);const o={},l="Ability: Store",a={},c=[{value:"Definition",id:"definition",level:2},{value:"Example",id:"example",level:2},{value:"Types with the <code>store</code> Ability",id:"types-with-the-store-ability",level:2},{value:"Further Reading",id:"further-reading",level:2}];function h(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"ability-store",children:"Ability: Store"})}),"\n",(0,s.jsxs)(i.p,{children:["Now that you have an understanding of top-level storage functions which are enabled by the\n",(0,s.jsx)(i.a,{href:"./key-ability",children:(0,s.jsx)(i.code,{children:"key"})})," ability, we can talk about the last ability in the list - ",(0,s.jsx)(i.code,{children:"store"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"definition",children:"Definition"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"store"})," is a special ability that allows a type to be ",(0,s.jsx)(i.em,{children:"stored"})," in objects. This ability is\nrequired for the type to be used as a field in a struct that has the ",(0,s.jsx)(i.code,{children:"key"})," ability. Another way to\nput it is that the ",(0,s.jsx)(i.code,{children:"store"})," ability allows the value to be ",(0,s.jsx)(i.em,{children:"wrapped"})," in an object."]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"store"})," ability also relaxes restrictions on transfer operations. We talk about it more in the\n",(0,s.jsx)(i.a,{href:"./transfer-restrictions",children:"Restricted and Public Transfer"})," section."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(i.p,{children:["In previous sections we already used types with the ",(0,s.jsx)(i.code,{children:"key"})," ability: all objects must have a ",(0,s.jsx)(i.code,{children:"UID"}),"\nfield, which we used in examples; we also used the ",(0,s.jsx)(i.code,{children:"Storable"})," type as a part of the ",(0,s.jsx)(i.code,{children:"Config"})," struct.\nThe ",(0,s.jsx)(i.code,{children:"Config"})," type also has the ",(0,s.jsx)(i.code,{children:"store"})," ability."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-move",children:"/// This type has the `store` ability.\npublic struct Storable has store {}\n\n/// Config contains a `Storable` field which must have the `store` ability.\npublic struct Config has key, store {\n    id: UID,\n    stores: Storable,\n}\n\n/// MegaConfig contains a `Config` field which has the `store` ability.\npublic struct MegaConfig has key {\n    id: UID,\n    config: Config, // there it is!\n}\n"})}),"\n",(0,s.jsxs)(i.h2,{id:"types-with-the-store-ability",children:["Types with the ",(0,s.jsx)(i.code,{children:"store"})," Ability"]}),"\n",(0,s.jsxs)(i.p,{children:["All native types (except for references) in Move have the ",(0,s.jsx)(i.code,{children:"store"})," ability. This includes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/primitive-types#booleans",children:"bool"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/primitive-types#integer-types",children:"unsigned integers"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/vector",children:"vector"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/address",children:"address"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["All of the types defined in the standard library have the ",(0,s.jsx)(i.code,{children:"store"})," ability as well. This includes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/option",children:"Option"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/string",children:"String"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"./../move-basics/type-reflection",children:"TypeName"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./../../reference/abilities",children:"Type Abilities"})," in the Move Reference."]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5521:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>l});var n=t(6672);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);