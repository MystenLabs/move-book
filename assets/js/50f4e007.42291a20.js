"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1626],{5521:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var o=i(6672);const s={},t=o.createContext(s);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(t.Provider,{value:n},e.children)}},8220:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"move-basics/control-flow","title":"Control Flow","description":"\x3c!--","source":"@site/../book/move-basics/control-flow.md","sourceDirName":"move-basics","slug":"/move-basics/control-flow","permalink":"/move-basics/control-flow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.13. String","permalink":"/move-basics/string"},"next":{"title":"5.15. Enums and Match","permalink":"/move-basics/enum-and-match"}}');var s=i(3420),t=i(5521);const l={},r="Control Flow",a={},c=[{value:"Conditional Statements",id:"conditional-statements",level:2},{value:"Repeating Statements with Loops",id:"repeating-statements-with-loops",level:2},{value:"The <code>while</code> Loop",id:"the-while-loop",level:2},{value:"Infinite <code>loop</code>",id:"infinite-loop",level:2},{value:"Exiting a Loop Early",id:"exiting-a-loop-early",level:2},{value:"Skipping an Iteration",id:"skipping-an-iteration",level:2},{value:"Early Return",id:"early-return",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"control-flow",children:"Control Flow"})}),"\n",(0,s.jsx)(n.p,{children:"Control flow statements are used to control the flow of execution in a program. They are used to\nmake decisions, repeat a block of code, or exit a block of code early. Move includes the following\ncontrol flow statements (explained in detail below):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"#conditional-statements",children:[(0,s.jsx)(n.code,{children:"if"})," and ",(0,s.jsx)(n.code,{children:"if-else"})]})," - making decisions on whether to execute a block of\ncode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"#repeating-statements-with-loops",children:[(0,s.jsx)(n.code,{children:"loop"})," and ",(0,s.jsx)(n.code,{children:"while"})," loops"]})," - repeating a block of code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"#exiting-a-loop-early",children:[(0,s.jsx)(n.code,{children:"break"})," and ",(0,s.jsx)(n.code,{children:"continue"})," statements"]})," - exiting a loop early"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#early-return",children:(0,s.jsx)(n.code,{children:"return"})})," statement - exiting a function early"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if"})," expression is used to make decisions in a program. It evaluates a\n",(0,s.jsx)(n.a,{href:"./expression#literals",children:"boolean expression"})," and executes a block of code if the expression is true.\nPaired with ",(0,s.jsx)(n.code,{children:"else"}),", it can execute a different block of code if the expression is false."]}),"\n",(0,s.jsxs)(n.p,{children:["The syntax for an ",(0,s.jsx)(n.code,{children:"if"})," expression is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"if (<bool_expression>) <expression>;\nif (<bool_expression>) <expression> else <expression>;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Just like any other expression, ",(0,s.jsx)(n.code,{children:"if"})," requires a semicolon if there are other expressions following\nit. The ",(0,s.jsx)(n.code,{children:"else"})," keyword is optional, except when the resulting value is assigned to a variable, as\nall branches must return a value to ensure type safety. Let\u2019s examine how an ",(0,s.jsx)(n.code,{children:"if"})," expression works\nin Move with the following example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=if_condition",children:'#[test]\nfun test_if() {\n    let x = 5;\n\n    // `x > 0` is a boolean expression.\n    if (x > 0) {\n        std::debug::print(&b"X is bigger than 0".to_string())\n    };\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Let's see how we can use ",(0,s.jsx)(n.code,{children:"if"})," and ",(0,s.jsx)(n.code,{children:"else"})," to assign a value to a variable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=if_else",children:"#[test]\nfun test_if_else() {\n    let x = 5;\n    let y = if (x > 0) {\n        1\n    } else {\n        0\n    };\n\n    assert_eq!(y, 1);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the value of the ",(0,s.jsx)(n.code,{children:"if"})," expression is assigned to the variable ",(0,s.jsx)(n.code,{children:"y"}),". If ",(0,s.jsx)(n.code,{children:"x"})," is greater\nthan 0, ",(0,s.jsx)(n.code,{children:"y"})," is assigned the value 1; otherwise, it is assigned 0. The ",(0,s.jsx)(n.code,{children:"else"})," block is required\nbecause both branches of the ",(0,s.jsx)(n.code,{children:"if"})," expression must return a value of the same type. Omitting the\n",(0,s.jsx)(n.code,{children:"else"})," block would result in a compiler error, as it ensures all possible branches are accounted for\nand type safety is maintained."]}),"\n",(0,s.jsxs)(n.p,{children:["Conditional expressions are among the most important control flow statements in Move. They evaluate\nuser-provided input or stored data to make decisions. One key use case is in the\n",(0,s.jsxs)(n.a,{href:"./assert-and-abort",children:[(0,s.jsx)(n.code,{children:"assert!"})," macro"]}),", which checks if a condition is true and aborts execution if\nit is not. We\u2019ll explore this in detail shortly."]}),"\n",(0,s.jsx)(n.h2,{id:"repeating-statements-with-loops",children:"Repeating Statements with Loops"}),"\n",(0,s.jsxs)(n.p,{children:["Loops are used to execute a block of code multiple times. Move has two built-in types of loops:\n",(0,s.jsx)(n.code,{children:"loop"})," and ",(0,s.jsx)(n.code,{children:"while"}),". In many cases they can be used interchangeably, but usually ",(0,s.jsx)(n.code,{children:"while"})," is used when\nthe number of iterations is known in advance, and ",(0,s.jsx)(n.code,{children:"loop"})," is used when the number of iterations is\nnot known in advance or there are multiple exit points."]}),"\n",(0,s.jsx)(n.p,{children:"Loops are useful for working with collections, such as vectors, or for repeating a block of code\nuntil a specific condition is met. However, take care to avoid infinite loops, which can exhaust gas\nlimits and cause the transaction to abort."}),"\n",(0,s.jsxs)(n.h2,{id:"the-while-loop",children:["The ",(0,s.jsx)(n.code,{children:"while"})," Loop"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"while"})," statement executes a block of code repeatedly as long as the associated boolean\nexpression evaluates to true. Just like we've seen with ",(0,s.jsx)(n.code,{children:"if"}),", the boolean expression is evaluated\nbefore each iteration of the loop. Additionally, like conditional statements, the ",(0,s.jsx)(n.code,{children:"while"})," loop is an\nexpression and requires a semicolon if there are other expressions following it."]}),"\n",(0,s.jsxs)(n.p,{children:["The syntax for the ",(0,s.jsx)(n.code,{children:"while"})," loop is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"while (<bool_expression>) { <expressions>; };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of a ",(0,s.jsx)(n.code,{children:"while"})," loop with a very simple condition:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=while_loop",children:"// This function iterates over the `x` variable until it reaches 10, the\n// return value is the number of iterations it took to reach 10.\n//\n// If `x` is 0, then the function will return 10.\n// If `x` is 5, then the function will return 5.\nfun while_loop(mut x: u8): u8 {\n    let mut y = 0;\n\n    // This will loop until `x` is 10.\n    // And will never run if `x` is 10 or more.\n    while (x < 10) {\n        y = y + 1;\n        x = x + 1;\n    };\n\n    y\n}\n\n#[test]\nfun test_while() {\n    assert_eq!(while_loop(0), 10); // 10 times\n    assert_eq!(while_loop(5), 5); // 5 times\n    assert_eq!(while_loop(10), 0); // loop never executed\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"infinite-loop",children:["Infinite ",(0,s.jsx)(n.code,{children:"loop"})]}),"\n",(0,s.jsxs)(n.p,{children:["Now let's imagine a scenario where the boolean expression is always ",(0,s.jsx)(n.code,{children:"true"}),". For example, if we\nliterally passed ",(0,s.jsx)(n.code,{children:"true"})," to the ",(0,s.jsx)(n.code,{children:"while"})," condition. This is similar to how the ",(0,s.jsx)(n.code,{children:"loop"})," statement\nfunctions, except that ",(0,s.jsx)(n.code,{children:"while"})," evaluates a condition."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=infinite_while",children:"#[test, expected_failure(out_of_gas, location=Self)]\nfun test_infinite_while() {\n    let mut x = 0;\n\n    // This will loop forever.\n    while (true) {\n        x = x + 1;\n    };\n\n    // This line will never be executed.\n    assert_eq!(x, 5);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["An infinite ",(0,s.jsx)(n.code,{children:"while"})," loop, or a ",(0,s.jsx)(n.code,{children:"while"})," loop with an always ",(0,s.jsx)(n.code,{children:"true"})," condition, is equivalent to a\n",(0,s.jsx)(n.code,{children:"loop"}),". The syntax for creating a ",(0,s.jsx)(n.code,{children:"loop"})," is straightforward:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"loop { <expressions>; };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Let's rewrite the previous example using ",(0,s.jsx)(n.code,{children:"loop"})," instead of ",(0,s.jsx)(n.code,{children:"while"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=infinite_loop",children:"#[test, expected_failure(out_of_gas, location=Self)]\nfun test_infinite_loop() {\n    let mut x = 0;\n\n    // This will loop forever.\n    loop {\n        x = x + 1;\n    };\n\n    // This line will never be executed.\n    assert_eq!(x, 5);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Infinite loops are rarely practical in Move, as every operation consumes gas, and an infinite loop\nwill inevitably lead to gas exhaustion. If you find yourself using a loop, consider whether there\nmight be a better approach, as many use cases can be handled more efficiently with other control\nflow structures. That said, ",(0,s.jsx)(n.code,{children:"loop"})," might be useful when combined with ",(0,s.jsx)(n.code,{children:"break"})," and ",(0,s.jsx)(n.code,{children:"continue"}),"\nstatements to create controlled and flexible looping behavior."]}),"\n",(0,s.jsx)(n.h2,{id:"exiting-a-loop-early",children:"Exiting a Loop Early"}),"\n",(0,s.jsxs)(n.p,{children:["As we already mentioned, infinite loops are rather useless on their own. And that's where we\nintroduce the ",(0,s.jsx)(n.code,{children:"break"})," and ",(0,s.jsx)(n.code,{children:"continue"})," statements. They are used to exit a loop early, and to skip the\nrest of the current iteration, respectively."]}),"\n",(0,s.jsxs)(n.p,{children:["Syntax for the ",(0,s.jsx)(n.code,{children:"break"})," statement is (without a semicolon):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"break\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"break"})," statement is used to stop the execution of a loop and exit it early. It is often used in\ncombination with a conditional statement to exit the loop when a certain condition is met. To\nillustrate this point, let's turn the infinite ",(0,s.jsx)(n.code,{children:"loop"})," from the previous example into something that\nlooks and behaves more like a ",(0,s.jsx)(n.code,{children:"while"})," loop:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=break_loop",children:"#[test]\nfun test_break_loop() {\n    let mut x = 0;\n\n    // This will loop until `x` is 5.\n    loop {\n        x = x + 1;\n\n        // If `x` is 5, then exit the loop.\n        if (x == 5) {\n            break // Exit the loop.\n        }\n    };\n\n    assert_eq!(x, 5);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Almost identical to the ",(0,s.jsx)(n.code,{children:"while"})," loop, right? The ",(0,s.jsx)(n.code,{children:"break"})," statement is used to exit the loop when ",(0,s.jsx)(n.code,{children:"x"}),"\nis 5. If we remove the ",(0,s.jsx)(n.code,{children:"break"})," statement, the loop will run forever, just like in the previous\nexample."]}),"\n",(0,s.jsx)(n.h2,{id:"skipping-an-iteration",children:"Skipping an Iteration"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"continue"})," statement is used to skip the rest of the current iteration and start the next one.\nSimilarly to ",(0,s.jsx)(n.code,{children:"break"}),", it is used in combination with a conditional statement to skip the rest of an\niteration when a certain condition is met."]}),"\n",(0,s.jsxs)(n.p,{children:["Syntax for the ",(0,s.jsx)(n.code,{children:"continue"})," statement is (without a semicolon):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"continue\n"})}),"\n",(0,s.jsx)(n.p,{children:"The example below skips odd numbers and prints only even numbers from 0 to 10:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=continue_loop",children:"#[test]\nfun test_continue_loop() {\n    let mut x = 0;\n\n    // This will loop until `x` is 10.\n    loop {\n        x = x + 1;\n\n        // If `x` is odd, then skip the rest of the iteration.\n        if (x % 2 == 1) {\n            continue // Skip the rest of the iteration.\n        };\n\n        std::debug::print(&x);\n\n        // If `x` is 10, then exit the loop.\n        if (x == 10) {\n            break // Exit the loop.\n        }\n    };\n\n    assert_eq!(x, 10) // 10\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"break"})," and ",(0,s.jsx)(n.code,{children:"continue"})," statements can be used in both ",(0,s.jsx)(n.code,{children:"while"})," and ",(0,s.jsx)(n.code,{children:"loop"})," loops."]}),"\n",(0,s.jsx)(n.h2,{id:"early-return",children:"Early Return"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"return"})," statement is used to exit a ",(0,s.jsx)(n.a,{href:"./function",children:"function"})," early and return a value. It is\noften used in combination with a conditional statement to exit the function when a certain condition\nis met. The syntax for the ",(0,s.jsx)(n.code,{children:"return"})," statement is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"return <expression>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a function that returns a value when a certain condition is met:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/control-flow.move anchor=return_statement",children:"/// This function returns `true` if `x` is greater than 0 and not 5,\n/// otherwise it returns `false`.\nfun is_positive(x: u8): bool {\n    if (x == 5) {\n        return false\n    };\n\n    if (x > 0) {\n        return true\n    };\n\n    false\n}\n\n#[test]\nfun test_return() {\n    assert_eq!(is_positive(5), false);\n    assert_eq!(is_positive(0), false);\n    assert_eq!(is_positive(1), true);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Unlike in many other languages, the ",(0,s.jsx)(n.code,{children:"return"})," statement is not required for the last expression in a\nfunction. The last expression in a function block is automatically returned. However, the ",(0,s.jsx)(n.code,{children:"return"}),"\nstatement is useful when we want to exit a function early if a certain condition is met."]}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./../../reference/control-flow",children:"Control Flow"})," chapter in the Move Reference."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);