"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3862],{5521:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var o=n(6672);const r={},s=o.createContext(r);function c(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(s.Provider,{value:t},e.children)}},8340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"move-basics/vector","title":"Vector","description":"Vectors are a native way to store collections of elements in Move. They are similar to arrays in","source":"@site/../book/move-basics/vector.md","sourceDirName":"move-basics","slug":"/move-basics/vector","permalink":"/move-basics/vector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"5.10. Standard Library","permalink":"/move-basics/standard-library"},"next":{"title":"5.12. Option","permalink":"/move-basics/option"}}');var r=n(3420),s=n(5521);const c={},i="Vector",a={},l=[{value:"Vector syntax",id:"vector-syntax",level:2},{value:"Vector operations",id:"vector-operations",level:2},{value:"Destroying a Vector of non-droppable types",id:"destroying-a-vector-of-non-droppable-types",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"vector",children:"Vector"})}),"\n",(0,r.jsxs)(t.p,{children:["Vectors are a native way to store collections of elements in Move. They are similar to arrays in\nother programming languages, but with a few differences. In this section, we introduce the ",(0,r.jsx)(t.code,{children:"vector"}),"\ntype and its operations."]}),"\n",(0,r.jsx)(t.h2,{id:"vector-syntax",children:"Vector syntax"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"vector"})," type is written using the ",(0,r.jsx)(t.code,{children:"vector"})," keyword followed by the type of the elements in\nangle brackets. The type of the elements can be any valid Move type, including other vectors."]}),"\n",(0,r.jsxs)(t.p,{children:["Move has a vector literal syntax that allows you to create vectors using the ",(0,r.jsx)(t.code,{children:"vector"})," keyword\nfollowed by square brackets containing the elements (or no elements for an empty vector)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/vector.move anchor=literal",children:"// An empty vector of bool elements.\nlet empty: vector<bool> = vector[];\n\n// A vector of u8 elements.\nlet v: vector<u8> = vector[10, 20, 30];\n\n// A vector of vector<u8> elements.\nlet vv: vector<vector<u8>> = vector[\n    vector[10, 20],\n    vector[30, 40]\n];\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"vector"})," type is a built-in type in Move, and does not need to be imported from a module.\nHowever, vector operations are defined in the ",(0,r.jsx)(t.code,{children:"std::vector"})," module, and you need to import the\nmodule to use them."]}),"\n",(0,r.jsx)(t.h2,{id:"vector-operations",children:"Vector operations"}),"\n",(0,r.jsx)(t.p,{children:"The standard library provides methods to manipulate vectors. The following are some of the most\ncommonly used operations:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"push_back"}),": Adds an element to the end of the vector."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"pop_back"}),": Removes the last element from the vector."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"length"}),": Returns the number of elements in the vector."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"is_empty"}),": Returns true if the vector is empty."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"remove"}),": Removes an element at a given index."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/vector.move anchor=methods",children:"let mut v = vector[10u8, 20, 30];\n\nassert!(v.length() == 3);\nassert!(!v.is_empty());\n\nv.push_back(40);\nlet last_value = v.pop_back();\n\nassert!(last_value == 40);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"destroying-a-vector-of-non-droppable-types",children:"Destroying a Vector of non-droppable types"}),"\n",(0,r.jsxs)(t.p,{children:["A vector of non-droppable types cannot be discarded. If you define a vector of types without the\n",(0,r.jsx)(t.code,{children:"drop"})," ability, the vector value cannot be ignored. If the vector is empty, the compiler requires an\nexplicit call to the ",(0,r.jsx)(t.code,{children:"destroy_empty"})," function."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/move-basics/vector.move anchor=no_drop",children:"/// A struct without `drop` ability.\npublic struct NoDrop {}\n\n#[test]\nfun test_destroy_empty() {\n    // Initialize a vector of `NoDrop` elements.\n    let v = vector<NoDrop>[];\n\n    // While we know that `v` is empty, we still need to call\n    // the explicit `destroy_empty` function to discard the vector.\n    v.destroy_empty();\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"destroy_empty"})," function will fail at runtime if you call it on a non-empty vector."]}),"\n",(0,r.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"./../../reference/primitive-types/vector",children:"Vector"})," in the Move Reference."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://docs.sui.io/references/framework/std/vector",children:"std::vector"})," module documentation."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);