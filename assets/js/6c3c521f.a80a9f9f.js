"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8792],{4632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"object/object-model","title":"What is an Object?","description":"The Object Model in Sui can be viewed as a high-level abstraction representing digital assets as","source":"@site/../book/object/object-model.md","sourceDirName":"object","slug":"/object/object-model","permalink":"/object/object-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"6.2. Evolution of Move","permalink":"/object/evolution-of-move"},"next":{"title":"6.4. Ownership","permalink":"/object/ownership"}}');var i=t(3420),o=t(5521);const a={},r="What is an Object?",c={},d=[{value:"Summary",id:"summary",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"what-is-an-object",children:"What is an Object?"})}),"\n",(0,i.jsxs)(n.p,{children:["The Object Model in Sui can be viewed as a high-level abstraction representing digital assets as\n",(0,i.jsx)(n.em,{children:"objects"}),". These objects have their own type and associated behaviors, a unique identifier, and\nsupport native storage operations like ",(0,i.jsx)(n.em,{children:"transfer"})," and ",(0,i.jsx)(n.em,{children:"share"}),". Designed to be intuitive and easy to\nuse, the Object Model enables a wide range of use cases to be implemented with ease."]}),"\n",(0,i.jsx)(n.p,{children:"Objects in Sui have the following properties:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," Every object has a type, defining the structure and behavior of the object. Objects of\ndifferent types cannot be mixed or used interchangeably, ensuring objects are used correctly\naccording to their type system."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unique ID:"})," Each object has a unique identifier, distinguishing it from other objects. This ID\nis generated upon the object's creation and is immutable. It's used to track and identify objects\nwithin the system."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner:"})," Every object is associated with an owner, who has control over changes to the object.\nOwnership on Sui can be exclusive to an account, shared across the network, or frozen, allowing\nread-only access without modification or transfer capabilities. We will discuss ownership in more\ndetail in the following sections."]}),"\n",(0,i.jsx)(n.p,{children:"Note that ownership does not control the confidentiality of an object \u2014 it is always\npossible to read the contents of an on-chain object from outside of Move. You should never store\nunencrypted secrets inside of objects."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Data:"})," Objects encapsulate their data, simplifying management and manipulation. The data\nstructure and operations are defined by the object's type."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Version:"})," The transition from accounts to objects is facilitated by object versioning.\nTraditionally, blockchains use a ",(0,i.jsx)(n.em,{children:"nonce"})," to prevent replay attacks. In Sui, the object's version\nacts as a nonce, preventing replay attacks for each object."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Digest:"})," Every object has a digest, which is a hash of the object's data. The digest is used to\ncryptographically verify the integrity of the object's data and ensures that it has not been\ntampered with. The digest is calculated when the object is created and is updated whenever the\nobject's data changes."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Objects in Sui are high-level abstractions representing digital assets."}),"\n",(0,i.jsx)(n.li,{children:"Objects have a type, unique ID, owner, data, version, and digest."}),"\n",(0,i.jsx)(n.li,{children:"The Object Model simplifies asset management and enables a wide range of use cases."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://docs.sui.io/concepts/object-model",children:"Object Model"})," in Sui Documentation."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5521:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6672);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);