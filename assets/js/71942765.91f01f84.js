"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[586],{4754:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"programmability/publisher","title":"Publisher Authority","description":"In application design and development, it is often needed to prove publisher authority. This is","source":"@site/../book/programmability/publisher.md","sourceDirName":"programmability","slug":"/programmability/publisher","permalink":"/programmability/publisher","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"8.11. One-Time Witness","permalink":"/programmability/one-time-witness"},"next":{"title":"8.13. Object Display","permalink":"/programmability/display"}}');var n=t(3420),r=t(5521);const a={},o="Publisher Authority",l={},h=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Publisher as Admin Role",id:"publisher-as-admin-role",level:2},{value:"Role on Sui",id:"role-on-sui",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"publisher-authority",children:"Publisher Authority"})}),"\n",(0,n.jsxs)(i.p,{children:["In application design and development, it is often needed to prove publisher authority. This is\nespecially important in the context of digital assets, where the publisher may enable or disable\ncertain features for their assets. The Publisher Object is an object, defined in the\n",(0,n.jsx)(i.a,{href:"./sui-framework",children:"Sui Framework"}),", that allows the publisher to prove their ",(0,n.jsx)(i.em,{children:"authority over a type"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"definition",children:"Definition"}),"\n",(0,n.jsxs)(i.p,{children:["The Publisher object is defined in the ",(0,n.jsx)(i.code,{children:"sui::package"})," module of the Sui Framework. It is a very\nsimple, non-generic object that can be initialized once per module (and multiple times per package)\nand is used to prove the authority of the publisher over a type. To claim a Publisher object, the\npublisher must present a ",(0,n.jsx)(i.a,{href:"./one-time-witness",children:"One Time Witness"})," to the ",(0,n.jsx)(i.code,{children:"package::claim"})," function."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-move",children:"module sui::package;\n\npublic struct Publisher has key, store {\n    id: UID,\n    package: String,\n    module_name: String,\n}\n"})}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:["If you're not familiar with the One Time Witness, you can read more about it\n",(0,n.jsx)(i.a,{href:"./one-time-witness",children:"here"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Here's a simple example of claiming a ",(0,n.jsx)(i.code,{children:"Publisher"})," object in a module:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/publisher.move anchor=publisher",children:"module book::publisher;\n\nuse sui::package::{Self, Publisher};\n\n/// Some type defined in the module.\npublic struct Book {}\n\n/// The OTW for the module.\npublic struct PUBLISHER has drop {}\n\n/// Uses the One Time Witness to claim the Publisher object.\nfun init(otw: PUBLISHER, ctx: &mut TxContext) {\n    // Claim the Publisher object.\n    let publisher: Publisher = sui::package::claim(otw, ctx);\n\n    // Usually it is transferred to the sender.\n    // It can also be stored in another object.\n    transfer::public_transfer(publisher, ctx.sender())\n}\n"})}),"\n",(0,n.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(i.p,{children:"The Publisher object has two functions associated with it which are used to prove the publisher's\nauthority over a type:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/publisher.move anchor=use_publisher",children:"// Checks if the type is from the same module, hence the `Publisher` has the\n// authority over it.\nassert!(publisher.from_module<Book>());\n\n// Checks if the type is from the same package, hence the `Publisher` has the\n// authority over it.\nassert!(publisher.from_package<Book>());\n"})}),"\n",(0,n.jsx)(i.h2,{id:"publisher-as-admin-role",children:"Publisher as Admin Role"}),"\n",(0,n.jsxs)(i.p,{children:["For small applications or simple use cases, the Publisher object can be used as an admin\n",(0,n.jsx)(i.a,{href:"./capability",children:"capability"}),". While in the broader context, the Publisher object has control over\nsystem configurations, it can also be used to manage the application's state."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/publisher.move anchor=publisher_as_admin",children:"/// Some action in the application gated by the Publisher object.\npublic fun admin_action(cap: &Publisher, /* app objects... */ param: u64) {\n    assert!(cap.from_module<Book>(), ENotAuthorized);\n\n    // perform application-specific action\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["However, Publisher misses some native properties of ",(0,n.jsx)(i.a,{href:"./capability",children:"Capabilities"}),", such as type\nsafety and expressiveness. The signature for the ",(0,n.jsx)(i.code,{children:"admin_action"})," is not very explicit, can be called\nby anyone else. And due to ",(0,n.jsx)(i.code,{children:"Publisher"})," object being standard, there now is a risk of unauthorized\naccess if the ",(0,n.jsx)(i.code,{children:"from_module"})," check is not performed. So it's important to be cautious when using the\n",(0,n.jsx)(i.code,{children:"Publisher"})," object as an admin role."]}),"\n",(0,n.jsx)(i.h2,{id:"role-on-sui",children:"Role on Sui"}),"\n",(0,n.jsxs)(i.p,{children:["Publisher is required for certain features on Sui. ",(0,n.jsx)(i.a,{href:"./display",children:"Object Display"})," can be created only\nby the Publisher, and TransferPolicy - an important component of the Kiosk system - also requires\nthe Publisher object to prove ownership of the type."]}),"\n",(0,n.jsx)(i.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,n.jsx)(i.p,{children:"In the next chapter we will cover the first feature that requires the Publisher object - Object\nDisplay - a way to describe objects for clients, and standardize metadata. A must-have for\nuser-friendly applications."})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},5521:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>o});var s=t(6672);const n={},r=s.createContext(n);function a(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);