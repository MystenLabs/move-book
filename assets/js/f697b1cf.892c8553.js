"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[479],{3872:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"programmability/transaction-context","title":"Transaction Context","description":"Every transaction has the execution context. The context is a set of predefined variables that are","source":"@site/../book/programmability/transaction-context.md","sourceDirName":"programmability","slug":"/programmability/transaction-context","permalink":"/programmability/transaction-context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"bookSidebar","previous":{"title":"Advanced Programmability","permalink":"/programmability/"},"next":{"title":"8.2. Module Initializer","permalink":"/programmability/module-initializer"}}');var s=n(3420),i=n(5521);const r={},o="Transaction Context",c={},d=[{value:"Reading the Transaction Context",id:"reading-the-transaction-context",level:2},{value:"Mutability",id:"mutability",level:2},{value:"Generating Unique Addresses",id:"generating-unique-addresses",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"transaction-context",children:"Transaction Context"})}),"\n",(0,s.jsx)(t.p,{children:"Every transaction has the execution context. The context is a set of predefined variables that are\navailable to the program during execution. For example, every transaction has a sender address, and\nthe transaction context contains a variable that holds the sender address."}),"\n",(0,s.jsxs)(t.p,{children:["The transaction context is available to the program through the ",(0,s.jsx)(t.code,{children:"TxContext"})," struct. The struct is\ndefined in the ",(0,s.jsx)(t.a,{href:"https://docs.sui.io/references/framework/sui/tx_context",children:(0,s.jsx)(t.code,{children:"sui::tx_context"})})," module and contains the following fields:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",children:"module sui::tx_context;\n\n/// Information about the transaction currently being executed.\n/// This cannot be constructed by a transaction--it is a privileged object created by\n/// the VM and passed in to the entrypoint of the transaction as `&mut TxContext`.\npublic struct TxContext has drop {\n    /// The address of the user that signed the current transaction\n    sender: address,\n    /// Hash of the current transaction\n    tx_hash: vector<u8>,\n    /// The current epoch number\n    epoch: u64,\n    /// Timestamp that the epoch started at\n    epoch_timestamp_ms: u64,\n    /// Counter recording the number of fresh id's created while executing\n    /// this transaction. Always 0 at the start of a transaction\n    ids_created: u64\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Transaction context cannot be constructed manually or directly modified. It is created by the system\nand passed to the function as a reference in a transaction. Any function called in a\n",(0,s.jsx)(t.a,{href:"./../concepts/what-is-a-transaction",children:"Transaction"})," has access to the context and can pass it into\nthe nested calls."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"TxContext"})," has to be the last argument in the function signature."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"reading-the-transaction-context",children:"Reading the Transaction Context"}),"\n",(0,s.jsxs)(t.p,{children:["With only exception of the ",(0,s.jsx)(t.code,{children:"ids_created"}),", all of the fields in the ",(0,s.jsx)(t.code,{children:"TxContext"})," have getters. The\ngetters are defined in the ",(0,s.jsx)(t.code,{children:"sui::tx_context"})," module and are available to the program. The getters\ndon't require ",(0,s.jsx)(t.code,{children:"&mut"})," because they don't modify the context."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",metastring:"file=packages/samples/sources/programmability/transaction-context.move anchor=reading",children:"public fun some_action(ctx: &TxContext) {\n    let me = ctx.sender();\n    let epoch = ctx.epoch();\n    let digest = ctx.digest();\n    // ...\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"mutability",children:"Mutability"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TxContext"})," is required to create new objects (or just ",(0,s.jsx)(t.code,{children:"UID"}),"s) in the system. New UIDs are\nderived from the transaction digest, and for the digest to be unique, there needs to be a changing\nparameter. Sui uses the ",(0,s.jsx)(t.code,{children:"ids_created"})," field for that. Every time a new UID is created, the\n",(0,s.jsx)(t.code,{children:"ids_created"})," field is incremented by one. This way, the digest is always unique."]}),"\n",(0,s.jsxs)(t.p,{children:["Internally, it is represented as the ",(0,s.jsx)(t.code,{children:"derive_id"})," function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",children:"native fun derive_id(tx_hash: vector<u8>, ids_created: u64): address;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"generating-unique-addresses",children:"Generating Unique Addresses"}),"\n",(0,s.jsxs)(t.p,{children:["The underlying ",(0,s.jsx)(t.code,{children:"derive_id"})," function can also be utilized in your program to generate unique\naddresses. The function itself is not exposed, but a wrapper function ",(0,s.jsx)(t.code,{children:"fresh_object_address"})," is\navailable in the ",(0,s.jsx)(t.code,{children:"sui::tx_context"})," module. It may be useful if you need to generate a unique\nidentifier in your program."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-move",children:"module sui::tx_context;\n\n/// Create an `address` that has not been used. As it is an object address, it will never\n/// occur as the address for a user.\n/// In other words, the generated address is a globally unique object ID.\npublic fun fresh_object_address(ctx: &mut TxContext): address {\n    let ids_created = ctx.ids_created;\n    let id = derive_id(*&ctx.tx_hash, ids_created);\n    ctx.ids_created = ids_created + 1;\n    id\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5521:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6672);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);