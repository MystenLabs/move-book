// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import * as yaml from 'yaml';
import fs from 'fs';
import type { SidebarsConfig } from '@docusaurus/plugin-content-docs';
import type { SidebarItemConfig } from '@docusaurus/plugin-content-docs/lib/sidebars/types.js';

type ExtendedSidebarItemConfig = SidebarItemConfig & {
  enumerate?: boolean;
};

/**
 * Loads a sidebar from a YAML file and returns a SidebarsConfig object.
 * Docusaurus will error out if the sidebar is not valid.
 *
 * @param yamlPath - The path to the YAML file.
 * @returns A SidebarsConfig object.
 */
export function loadSidebarsFromYaml(yamlPath: string): SidebarsConfig {
  const sidebars: SidebarsConfig = {};

  // Read all YAML files in the directory
  const yamlContent = fs.readFileSync(yamlPath, 'utf8');
  const sidebarConfig = yaml.parse(yamlContent);

  // Enumerate or keep config as is.
  Object.entries(sidebarConfig).forEach(([key, value]) => {
    sidebars[key] = processSidebar(value as ExtendedSidebarItemConfig[]);
  });

  return sidebars;
}

/**
 * Enumerate the sidebar items.
 * Supports custom `enumerate` tag.
 *
 * @param sidebar - The sidebar to enumerate.
 * @param parentIndex - The index of the parent item (for recursive enumeration).
 * @returns The enumerated sidebar.
 */
export function processSidebar(
  sidebar: ExtendedSidebarItemConfig[],
  parentIndex?: number,
  parentEnumerate: boolean = true,
): SidebarItemConfig[] {
  let index = 0;

  return sidebar.map((item) => {
    // plain autogenerated items
    if (typeof item === 'string') {
      return item;
    }

    let enumerate = (item.enumerate == false ? false : true) && parentEnumerate;
    'enumerate' in item && delete item.enumerate; // strip illegal tags

    // default to doc if type not specified
    if (item.type === undefined) {
      item.type = 'doc';
    }

    // enumerate category header if it has a label and link
    if (enumerate && item.type === 'category' && item.label && item.link) {
      index++;
      item.label = `${parentIndex ? `${parentIndex}.` : ''}${index}. ${item.label}`;
    }

    // enumerate category items
    // if category has no enumeration, items are not children but top level items
    if (item.type === 'category' && item.items) {
      item.items = processSidebar(item.items as ExtendedSidebarItemConfig[], index, enumerate);
    }

    if (enumerate && item.type === 'doc' && item.label) {
      index++;
      item.label = `${parentIndex ? `${parentIndex}.` : ''}${index}. ${item.label}`;
    }

    return item;
  });
}
